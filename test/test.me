/*
    test.me - MakeMe file for Appweb test
 */

Me.load({
    targets: {
        test: {
            action: `run('testme --depth ' + me.settings.depth)`,
            platforms: [ 'local' ],
            depends: [ 'test-prep' ],
            generate: false,
        },

        'test-prep': {
            platforms: [ 'local' ],
            depends: [ 'clean-test', 'build', 'cgiProgram', 'prep-cgi', 'test-testScript', 'test-cgiProgram' ],
            generate: false,
        },


        'cgiProgram': {
            type:   'exe',
            sources: [ 'cgiProgram.c' ],
            ifdef: [ 'cgi' ],
            action: true,
            generate: false,
        },

        'prep-cgi': {
            action: `
                let path = me.dir.out.join('.cgi-prepared')
                if (!path.exists) {
                    Cmd.run('testme --clean')
                    rm(['cgi-bin/cgi*', 'cgi-bin/nph*', 'cgi-bin/testScript' ])
                    path.write('')
                    Path('web/tmp').makeDir()
                }
            `,
            generate: false,
        },

        'test-testScript': {
            path: 'cgi-bin/testScript',
            action: `
                let path = TARGET.path.relative
                path.write('#!' + me.dir.bin.join('cgiProgram${EXE}' + '\n'))
                path.setAttributes({permissions: 0755})
                trace('Create', path)
            `,
            depends: [ 'cgiProgram' ],
            generate: false,
            platforms: [ 'local' ],
            ifdef: [ 'cgi' ],
        },

        'test-cgiProgram': {
            path: 'cgi-bin/cgiProgram${EXE}',
            action: `
                let perms = { permissions: 0755 }
                let cgiProgram = me.dir.bin.join('cgiProgram${EXE}')
                cp(cgiProgram, Path('cgi-bin/cgiProgram${EXE}'), perms)
                cp(cgiProgram, Path('cgi-bin/nph-cgiProgram${EXE}'), perms)
                cp(cgiProgram, Path('cgi-bin/cgi Program${EXE}'), perms)
                cp(cgiProgram, Path('web/cgiProgram.cgi'), perms)
            `,
            depends: [ 'cgiProgram' ],
            generate: false,
            platforms: [ 'local' ],
            ifdef: [ 'cgi' ],
        },

        'auth.conf': {
            action: `
                let path = Path('auth.conf')
                trace('Generate', 'Authorization file: ' + path)
                path.write('#\n#   ' + path + ' - Authorization roles and users\n#\n\n')
                path.write('Role user view\nRole administrator view\nRole executive manage direct\n\n')
                run('authpass --file auth.conf --cipher md5 --password pass4 example.com julie user')
                run('authpass --file auth.conf --cipher md5 --password pass3 example.com peter user')
                run('authpass --file auth.conf --cipher md5 --password pass2 example.com mary user executive')
                run('authpass --file auth.conf --cipher md5 --password pass1 example.com joshua user administrator purchase')
                run('authpass --file auth.conf --cipher blowfish --password pass5 example.com ralph user administrator purchase')
            `,
        },

        testPackage: {
            type: 'test',
            action: `
                require embedthis.me
                let package = Installs()
                let pname = package.packageName()
                if (!pname || !pname.exists) {
                    trace('Test', 'testPackage -- SKIPPED (Missing package to install)')
                } else if (makeme.options.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (me.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            package.uninstallPackage()
                            package.checkUninstalled()
                        }
                        package.installPackage()
                        if (missing = package.checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        let s = me.settings
                        trace('Test', 'appweb -V')
                        assert(Cmd.run([me.prefixes.bin.join('appweb'), '-V']).trim() == s.version)
                        trace('Test', 'appweb running')
                        assert(Cmd.ps(/appweb/))
                        let http = new Http
                        trace('Test', 'GET /index.html')
                        App.sleep(3000)
                        http.get('/index.html')
                        assert(http.response.contains('Embedthis Appweb'))
                        package.uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = package.checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            `,
        },

        'test-run': {
            enable: "!me.platform.cross",
            depends: [ 'compile' ],
            action: `
                trace('Run', 'From directory src/server')
                run('appweb -v')
            `,
        },

        'clean-test': {
            type: 'clean',                                                                                 
            action: `                                                                                      
                Cmd.run('testme --clean')
                rm('cache/*')
                rm('app/cache/*')
                rm('esp/*/cache/*')
                rm('junk/**')
                rm('cgi-bin/cgi*')
                rm('cgi-bin/nph*')
                rm('cgi-bin/testScript*')
                rm('web/js')
                Path('cache').makeDir()
                Path('cache/.keep').write()
                Path('app/cache').makeDir()
                Path('app/cache/.keep').write()
                Path('web/cgiProgram.cgi').remove()
            `
        },

        'session-test': {
            shell: `
                openssl s_client -reconnect -connect 127.0.0.1:4443 -crlf 2>/dev/null | grep Session-ID:
            `
        }
    }
})
