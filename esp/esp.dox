/*
 *	@copy	default
 *	@end
 */

/**
 *	@file	esp.dox
 *	@brief	Doxygen documentation for esp.h
 */

/**
 *	@file	esp.h
 *	@brief	Embedded Server Pages (ESP).
 *
 *	Embedded Server Pages (ESP) is a simple and powerful environment for 
 *	creating dynamic HTML web pages. It is a portable and cross-platform and
 *	has been ported to run in several web servers. It is like a mini-PHP
 *	with a similar usage paradigm, but is much smaller and requires far fewer
 *	resources at run time.
 *
 *	ESP allows you to embed JavaScript statements, scripts and programs into
 *	HTML pages that are automatically run when the ESP page is accessed. The
 *	ESP engine and embedded scripting create the actual page the users sees
 *	"on the fly". ESP and the Embedded JavaScript (EJS) interpreter work 
 * 	very closely together to provide the ESP page creation environment.
 *
 *	JavaScript statements can use standard JavaScript features or you can
 *	enhance the JavaScript environment by publishing new JavaScript functions
 *	that can be called from with the ESP pages. ESP allows you to link C 
 *	functions to their JavaScript namesake so that when an ESP page executes
 *	a JavaScript function call, the C function is seamlessly invoked with the
 *	appropriate arguments.
 *
 *	Read the ESP User Guide and the JavaScript Guide for more details.
 */

/*********************************** Types ************************************/

///	@var typedef int (*EspCFunction)(EspRequest *ep, int argc, MprVar **argv);
///	@brief Function signature for ESP function callback procedures. 
///	The maEspDefineCFunction call takes a function of this prototype to
///		associate with a JavaScript function.
///	@param ep ESP request handle.
///	@param argc Count of the number of arguments in argv
///	@param argv Array of string arguments
///	@stability Evolving
///	@library libespModule


///	@var typedef int (*EspStringCFunction)(EspRequest *ep, int argc, 
///		char **argv);
///	@brief Function signature for ESP function callbacks that require string
///		arguments. The maEspDefineStringCFunction call takes a function of this 
///		prototype to associate with a JavaScript function.
///	@param ep ESP request handle.
///	@param argc Count of the number of arguments in argv
///	@param argv Array of string arguments
///	@stability Evolving
///	@library libespModule


///	@var typedef void* EspHandle;
///	@brief Opaque handle usually used to store the web request handle.
///	@stability Evolving
///	@library libespModule


/********************************* Procedures *********************************/

///	@fn void espDefineCFunction(EspRequest *ep, char *functionName, 
///		EspCFunction fn, void *thisPtr);
///	@synopsis Define a C language function to invoke when the named JavaScript
///		function is called.
///	@overview This call binds a C function with a JavaScript function name. 
///		Whenever the JavaScript function is called, the associated C function
///		will be invoked with the supplied arguments.
///	@param ep ESP request handle.
///	@param functionName JavaScript function name to associate with this C 
///		function.
///	@param fn C function to be invoked.
///	@param thisPtr If using C++ the \a thisPtr argument can be set to an 
///		object that will contain a function to be invoked. The \a fn argument
///		must still be set to a C language wrapper which then invokes the C++
///		function contained in the object pointed to by \a thisPtr.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineFunction, espDefineStringCFunction


///	@fn void espDefineFunction(EspRequest *ep, char *functionName, char *args, 
///		char *body);
///	@synopsis Define a JavaScript function.
///	@overview This call defines a JavaScript function by supplying a JavaScript
///		script body and a formal argument list.
///	@param ep ESP request handle.
///	@param functionName JavaScript function name for this function.
///	@param args Formal parameters for the function.
///	@param body JavaScript body of the function.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espDefineStringCFunction


///	@fn void espDefineStringCFunction(EspRequest *ep, char *functionName, 
///		EspStringCFunction fn, void *thisPtr);
///	@synopsis Define a C language function with string arguments to invoke 
///		when the named JavaScript function is called.
///	@overview This call binds a C function with a JavaScript function name.
///		Whenever the JavaScript function is called, the given arguments are 
///		converted to strings and the associated C function is be invoked.
///		For functions that only ever require string arguments, this is the
///		preferred way of binding to JavaScript function names.
///	@param ep ESP request handle.
///	@param functionName JavaScript function name to associate with this C 
///		function.
///	@param fn C function to be invoked.
///	@param thisPtr If using C++ the \a thisPtr argument can be set to an 
///		object that will contain a function to be invoked. The \a fn argument
///		must still be set to a C language wrapper which then invokes the C++
///		function contained in the object pointed to by \a thisPtr.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineFunction, espDefineCFunction


///	@fn void espError(EspRequest *ep, char *fmt, ...);
///	@synopsis Abort the ESP request and respond with an error
///	@overview This call aborts the current ESP request. If ESP is configured
///		to send errors to the user's browser, the formatted error messsage will
///		be sent to the browser. If configured to log error messages, the error
///		is logged. Note: that error messages are automatically HTML encoded to 
///		prevent cross-site scripting errors.
///	@param ep ESP request handle.
///	@param fmt Printf style format string
///	@param ... Variable arguments for the format string
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espGetRequestHandle, espGetResult, 
///		espGetScriptHandle, espRedirect, espSetHeader, espSetResponseCode, 
///		espSetReturn, espWrite


///	@fn int espEvalFile(EspRequest *ep, char *path, MprVar *result, 
///		char **emsg);
///	@synopsis Evaluate a file script 
///	@overview This call reads and evaluates the script specified by the \a
///		path argument. The value of the last expression evaluated is returned
///		in result. If the script encounters an error, processing is aborted
///		and \a emsg is set to a descriptive error message. If an error occurs
///		the caller must free the message by calling mprFree(emsg).
///	@param ep ESP request handle.
///	@param path File pathname containing the name of the script file. 
///	@param result Pointer to a MprVar variable that will contain a pointer to
///		the result. The caller does not need to free the result.
///	@param emsg Pointer to a location to hold an error message if errors
///		occurs.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineFunction, espDefineCFunction, espDefineStringCFunction,
///		espRunFunction, espEvalScript


///	@fn int espEvalScript(EspRequest *ep, char *script, MprVar *result, 
///		char **emsg);
///	@synopsis Evaluate a script 
///	@overview This call evaluates the supplied ESP/JavaScript script.
///		The value of the last expression evaluated is returned in result. If 
///		the script encounters an error, processing is aborted and \a emsg 
///		is set to a descriptive error message. If an error occurs the caller 
///		must free the message by calling mprFree(emsg).
///	@param ep ESP request handle.
///	@param script Buffer containing the script.
///	@param result Pointer to a MprVar variable that will contain a pointer to
///		the result. The caller does not need to free the result.
///	@param emsg Pointer to a location to hold an error message if errors
///		occurs.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineFunction, espDefineCFunction, espDefineStringCFunction,
///		espRunFunction, espEvalFile


///	@fn EspHandle espGetRequestHandle(EspRequest *ep);
///	@synopsis Get the web server request handle.
///	@overview This call returns the web server request handle that describes 
///		the current web request. For AppWeb this is an MaRequest* type and for 
///		WebServer it is a webs_t type.
///	@param ep ESP request handle.
///	@return Returns the web server request handle.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetResult, espGetScriptHandle, 
///		espRedirect, espSetHeader, espSetResponseCode, espSetReturn, espWrite


///	@fn MprVar *espGetResult(EspRequest *ep);
///	@synopsis Get the current ESP result.
///	@overview This call gets the result value of the last ESP expression or
///		function executed. If you call espEvalScript, espEvalFile or
///		espRunFunction, ESP will set the result to be the value of the last
///		expression evaluated. If that is a function, the result will be the
///		return value of the script. If it is a script, it will be the value of
///		last expression evaluated.
///	@param ep ESP request handle.
///	@returns Pointer to the MprVar describing the result. The caller does not
///		need to free the variable.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, 
///		espGetScriptHandle, espRedirect, espRunFunction, espSetHeader, 
///		espSetResponseCode, espSetReturn, espWrite


///	@fn EjsId espGetScriptHandle(EspRequest *ep);
///	@synopsis Get the JavaScript instance handle.
///	@overview This call returns JavaScript instance handle that can be used
///		with many EJS API calls.
///	@param ep ESP request handle.
///	@return Returns the JavaScript instance handle.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult,
///		espRedirect, espSetHeader, espSetResponseCode, espSetReturn, espWrite


///	@fn int espGetPropertyCount(MprVar *obj, int includeFlags);
///	@synopsis Get the count of properties in an object
///	@overview Returns the count of properties in an object. \a includeFlags
///		determines the types of properties that are counted.
///	@param obj The object in which to count the properties.
///	@param includeFlags Bit mask specifying what properties to count. 
///		@li MPR_ENUM_DATA means count data properties.
///		@li MPR_ENUM_FUNCTION means count function properties.
///	@return Returns the number selected properties in the object.
///		Returns MPR_ERR_BAD_STATE if the object is not of type MPR_TYPE_OBJECT.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espGetFirstProperty, espGetNextProperty, espGetProperty, espGetVar
///		espSetVar, espSetStringVar



///	@fn MprVar *espGetFirstProperty(MprVar *obj, int includeFlags);
///	@synopsis Get the first property in from an object.
///	@overview To iterate over the properties in an object, 
///		espGetFirstProperty and espGetNextProperty are used. You can specify
///		what object properties you wish to enumerate by setting the 
///		includeFlags mask. For example:
///
///		@code
///			MprVar	*vp;
///			vp = espGetFirstProperty(obj, MPR_ENUM_DATA);
///			while (vp) {
///				/* Processing each property here */
///				vp = espGetNextProperty(obj, vp);
///			}
///		@endcode
///
///	@param obj The object in which to enumerate the properties.
///	@param includeFlags Bit mask that specifies what variables to enumerate.
///		Or together bits from: MPR_ENUM_DATA to enumerate data properties and, 
///		MPR_ENUM_FUNCTIONS to enumerate functions.
///	@return Returns a pointer to the property. Caller does not need to free.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espGetNextProperty, espGetProperty, espGetPropertyCount, espGetVar,
///		espSetVar


///	@fn MprVar *espGetLocalObject(EspRequest *ep);
///	@synopsis Return a pointer to the local variables object
///	@overview ESP maintains a local variable object in which all local 
///		variables are defined as properties. You can access local variables
///		directly by name or via "local.name". Use the espGetProperty routine
///		to read properties in the local object.
///	@param ep ESP request handle.
///	@return Returns a pointer to the local object. The caller should not free
///		the returned object. 
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetGlobalObject, espGetProperty, espGetVar, 
///		espGetStringVar, espGetResult, espSetProperty


///	@fn MprVar *espGetGlobalObject(EspRequest *ep);
///	@synopsis Return a pointer to the JavaScript interpreter's global 
///		variables object
///	@overview ESP maintains a global variable object in which all global 
///		variables are defined as properties. You can access global variables
///		directly by name or via "global.name". This is useful if there may be
///		a local variable of the same name and you need to guarantee you are 
///		referencing the global variable.
///	@param ep ESP request handle.
///	@return Returns a pointer to the global object. The caller should not free
///		the returned object. 
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetLocalObject, espGetProperty, espGetVar, 
///		espGetStringVar, espGetResult, espSetProperty


///	@fn MprVar *espGetNextProperty(MprVar *obj, MprVar *currentProperty,
///		int includeFlags);
///	@synopsis Get the next property when enumerating object properties.
///	@overview This call returns the next property in sequence. Use
///		espGetFirstProperty to begin the enumeration.
///	@param obj The object in which to enumerate the properties.
///	@param currentProperty The property last returned from espGetNextProperty
///		or espGetFirstProperty.
///	@param includeFlags Bit mask that specifies what variables to enumerate.
///		Or together bits from: MPR_ENUM_DATA to enumerate data properties and, 
///		MPR_ENUM_FUNCTIONS to enumerate functions.
///	@return Returns a pointer to the property. Caller does not need to free.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espGetFirstProperty, espGetProperty, espGetPropertyCount, espGetVar,
///		espSetVar


///	@fn char *espGetStringVar(EspRequest *ep, EspEnvType oType, char *var, 
///		char *defaultValue);
///	@synopsis Get the string value of a standard ESP array.
///	@overview This call returns the value of a string variable from one of 
///		the standard ESP variables arrays: application, server[], session[], 
///		request[], headers[], cookies[], files[], form[], application[], 
///		global[], and local[]. This call indexes into one of these object 
///		arrays to retrieve a specific variable setting and return a pointer to
///		its string value.
///
///		if the variable is not defined, the supplied \a defaultValue is
///		returned.
///	@param ep ESP request handle.
///	@param oType Object index. Must be one of:
///		ESP_SERVER_OBJ, ESP_SESSION_OBJ, ESP_REQUEST_OBJ, ESP_HEADERS_OBJ, 
///		ESP_COOKIES, ESP_FILES, ESP_FORM_OBJ, ESP_APPLICATION_OBJ, 
///		ESP_GLOBAL_OBJ, ESP_LOCAL_OBJ
///	@param var Name of the variable to access. For example: 
///
///		@code
///		espGetStringVar(ep, ESP_HEADERS_OBJ, "Content-Type", &value);
///		@endcode
///		
///		will retrieve the Content-Type HTTP header from the headers[]
///		object.
///	@param defaultValue Default value to return if the variable is not found.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetProperty, espGetResult, espGetVar, espSetProperty, 
///		espSetVar, espSetStringVar, espWrite


///	@fn int espGetVar(EspRequest *ep, EspEnvType oType, char *var, MprVar *value);
///	@synopsis Get the value of a standard ESP variable.
///	@overview ESP defines standard object variables that describe the request
///		details. These include: application, server[], session[], request[], 
///		headers[], cookies[], files[], form[], application[], global[], and 
//		local[]. This call indexes into one of these object arrays to retrieve 
//		a specific variable setting.
///	@param ep ESP request handle.
///	@param oType Object index. Must be one of:
///		ESP_SERVER_OBJ, ESP_SESSION_OBJ, ESP_REQUEST_OBJ, ESP_HEADERS_OBJ, 
///		ESP_COOKIES, ESP_FILES, ESP_FORM_OBJ, ESP_APPLICATION_OBJ, 
///		ESP_GLOBAL_OBJ, ESP_LOCAL_OBJ
///	@param var Name of the variable to access. For example: 
///
///		@code
///			espGetVar(ep, ESP_HEADERS_OBJ, "Content-Type", &value);
///		@endcode
///		
///		will retrieve the Content-Type HTTP header from the headers[]
///		object.
///	@param value Pointer to a Mpr variable to hold the result. Callers do not
///		need to free the result value.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetProperty, espGetResult, espGetStringVar, espGetResult,
///		espReadVar, espSetProperty, espSetVar, 
///		espSetStringVar, espWrite, espWriteVar


///	@fn void espRedirect(EspRequest *ep, int code, char *url);
///	@synopsis Redirect the client browser to a new location.
///	@overview This call redirects the client's browser to a new URL. It 
///		responds to the current HTTP request from the client with a HTTP
///		redirection response. The redirection may be to another page within
///		the current web, or it may be to a different server. This call
///		will set the "Location" HTTP header and the HTTP response code.
///		As ESP bufferes output data, you may issue this call after calling
///		espWrite. In this case, any written data will be discarded. If you 
///		wish to discontinue processing the remainder of the ESP script, you 
///		should call espSetExitStatus.
///	@param ep ESP request handle.
///	@param code HTTP response code. Set to zero to use the default code of 302
///		which is the HTTP response code for a temporary redirection.
///	@param url URL to redirect to.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult,
///		espGetScriptHandle, espSetHeader, espSetResponseCode, espSetReturn, 
///		espWrite


///	@fn int espRunFunction(EspRequest *ep, MprVar *obj, char *functionName, 
///		MprArray *args);
///	@synopsis Run a function.
///	@overview This call runs the named function that has been previously 
///		defined using espDefineFunction, espDefineCFunction or
///		espDefineStringCFunction. NOTE: the target function may thus be a pure
///		JavaScript function or it may be a C function bound to a JavaScript
///		function name.
///	@param ep ESP request handle.
///	@param obj If the function is to be run as an object method, then obj should
///		be set to the relevant object. Otherwise, set obj to NULL.
///	@param functionName JavaScript function name to associate with this C 
///		function.
///	@param args Array of arguments to pass to the function. This array must
///		be created using mprCreateArray.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineFunction, espDefineCFunction, espDefineStringCFunction,
///		espEvalFile, espEvalScript, espGetResult


///	@fn void espSetHeader(EspRequest *ep, char *header, bool allowMultiple);
///	@synopsis Set a HTTP response header
///	@overview This call defines a HTTP response header. The \a value argument
///		should contain a string of the format "keyword: value". If a header has
///		already been defined and \a allowMultiple is false, the header will be
///		overwritten. If \a allowMultiple is true, the new header will be
///		appended to the response headers and the existing header will also be
///		output. NOTE: case does not matter in the header keyword.
///	@param ep ESP request handle.
///	@param header Header string
///	@param allowMultiple If false, overwrite existing headers with the same
///		keyword. If true, all headers are output.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetResult, espGetRequestHandle, 
///		espGetScriptHandle, espRedirect, espSetResponseCode, espSetReturn, 
///		espWrite


///	@fn void espSetResponseCode(EspRequest *ep, int code);
///	@synopsis Set the HTTP response code
///	@overview This call defines the HTTP status code output with the request
///		response. This call should not normally be needed as espError will 
///		set the response code if an error occurs. If no error has occurred the
///		web server will set the response code automatically to 200 which is a 
///		successful status code, See RFC 2616 for a complete list of HTTP 
///		status codes at http://www.w3.org/Protocols/rfc2616/rfc2616.html
///	@param ep ESP request handle.
///	@param code HTTP status code
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult, 
///		espGetScriptHandle, espRedirect, espSetHeader, espSetReturn, espWrite


///	@fn void void espSetReturn(EspRequest *ep, MprVar value);
///	@synopsis Set the ESP function return value.
///	@overview This call sets the return result value of an ESP function that
///		has been bound to a JavaScript function via espDefineCMethod. The
///		return value can be a primitive type such as an integer or string or
///		it may be a complete object. See the MprVar and the variable
///		constructors such as mprCreateStringVar and mprCreateIntegerVar for 
///		defining result values. If you have string return values, use the
///		convenience routine espSetReturnString.
///	@param ep ESP request handle.
///	@param value Return value.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult,
///		espGetScriptHandle, espRedirect, espRunFunction, espSetHeader, 
///		espSetResponseCode, espWrite


///	@fn void espSetReturnString(EspRequest *ep, char *str);
///	@synopsis Set the ESP function return value to a string value.
///	@overview This call sets the return result value of an ESP function that
///		has been bound to a JavaScript function via espDefineCMethod. This
///		call converts the supplied string to an ESP variable. If you need to
///		return types other than a string, use espSetReturn.
///	@param ep ESP request handle.
///	@param str Return string value.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult,
///		espGetScriptHandle, espRedirect, espRunFunction, espSetHeader, 
///		espSetResponseCode, espSetReturn, espWrite


///	@fn void espSetStringVar(EspRequest *ep, EspEnvType oType, char *var, 
///		char *value);
///	@synopsis Set a string variable value in a standard ESP array.
///	@overview This call creates or updates the value of a string variable in 
///		one of the standard ESP variables arrays: application, server[], 
///		session[], request[], headers[], cookies[], files[], form[], 
///		application[], global[], and local[]. This call indexes into one of 
///		these object arrays to set a specific variable setting. If the
///		variable does not already exist, it is created. Otherwise its value is
///		updated. 
///	@param ep ESP request handle.
///	@param oType Object index. Must be one of:
///		ESP_SERVER_OBJ, ESP_SESSION_OBJ, ESP_REQUEST_OBJ, ESP_HEADERS_OBJ, 
///		ESP_COOKIES, ESP_FILES, ESP_FORM_OBJ, ESP_APPLICATION_OBJ, 
///		ESP_GLOBAL_OBJ, ESP_LOCAL_OBJ
///	@param var Name of the variable to set. For example: 
///
///		@code
///	espSetStringVar(ep, ESP_SESSION_OBJ, "name", "Peter Hale");
///		@endcode
///
///	@param value String value to use in setting the variable.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetResult, espGetVar, espGetStringVar, espGetResult, 
///		espReadVar, espSetVar, espWrite, espWriteVar


///	@fn void espSetVar(EspRequest *ep, EspEnvType oType, char *var, 
///		MprVar value);
///	@synopsis Set a variable value in a standard ESP array.
///	@overview This call creates or updates the value of a variable in 
///		one of the standard ESP variables arrays: application, server[], 
///		session[], request[], headers[], cookies[], files[], form[], 
///		application[], global[], and local[]. This call indexes into one of 
///		these object arrays to set a specific variable setting. If the
///		variable does not already exist, it is created. Otherwise its value is
///		updated. 
///	@param ep ESP request handle.
///	@param oType Object index. Must be one of:
///		ESP_SERVER_OBJ, ESP_SESSION_OBJ, ESP_REQUEST_OBJ, ESP_HEADERS_OBJ, 
///		ESP_COOKIES, ESP_FILES, ESP_FORM_OBJ, ESP_APPLICATION_OBJ, 
///		ESP_GLOBAL_OBJ, ESP_LOCAL_OBJ
///	@param var Name of the variable to set. For example: 
///
///		@code
///			espSetVar(ep, ESP_SESSION_OBJ, "name", 
///				mprCreateStringVar("Peter Hale", 0));
///		@endcode
///
///	@param value Instance of a MprVar type describing the value to set.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetResult, espGetVar, espGetStringVar, espGetResult, 
///		espReadVar, espSetStringVar, espWrite, espWriteVar


///	@fn int espWrite(EspRequest *ep, char *buf, int size);
///	@synopsis Write response data back to the client's browser.
///	@overview This call writes the block of data in \a buf back to the 
///		client's browser. The data is buffered up to a configurable limit.
///		If the maximum ESP buffer limit is exceeded, the data will be written to
///		the client as required after first writing all previously buffered 
///		data included any HTTP headers. 
///	@param ep ESP request handle.
///	@param buf Pointer to a buffer containing the data to be written.
///	@param size Length of the data buffer.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult,
///		espGetScriptHandle, espRedirect, espSetHeader, espSetResponseCode, 
///		espSetReturn, espWriteFmt


///	@fn int espWriteFmt(EspRequest *ep, char *fmt, ...);
///	@synopsis Write formatted response data back to the client's browser.
///	@overview This call formats a string and then writes it to the client's 
///		browser. The data is buffered up to a configurable limit.
///		If the maximum ESP buffer limit is exceeded, the data will be written to
///		the client as required after first writing all previously buffered 
///		data included any HTTP headers. 
///	@param ep ESP request handle.
///	@param fmt Printf style format string
///	@param ... Format string arguments
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espError, espGetRequestHandle, espGetResult,
///		espGetScriptHandle, espRedirect, espSetHeader, espSetResponseCode, 
///		espSetReturn, espWrite


///	@fn int espUnsetVar(EspRequest *ep, EspEnvType oType, char *var);
///	@synopsis Unset a string variable value in a standard ESP array.
///	@overview This call removes a string variable in one of the standard 
///		ESP variables arrays: application, server[], session[], request[], 
///		headers[], cookies[], files[], form[], application[], global[], and 
///		local[]. This call indexes into one of these object arrays to remove 
///		the specified variable setting. 
///	@param ep ESP request handle.
///	@param oType Object index. Must be one of:
///		ESP_SERVER_OBJ, ESP_SESSION_OBJ, ESP_REQUEST_OBJ, ESP_HEADERS_OBJ, 
///		ESP_COOKIES, ESP_FILES, ESP_FORM_OBJ, ESP_APPLICATION_OBJ, 
///		ESP_GLOBAL_OBJ, ESP_LOCAL_OBJ
///	@param var Name of the variable to set. For delete: 
///
///		@code
///	espSetStringVar(ep, ESP_SESSION_OBJ, "priority");
///		@endcode
///	@return Returns zero for success, otherwise a negative MPR error code.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espError, espGetResult, espGetVar, espGetStringVar, espGetResult, 
///		espSetVar, espWrite


///	@fn int espCopyVar(EspRequest *ep, char *var, MprVar *value, int copyDepth);
///	@synopsis Copy a JavaScript variable
///	@overview This function copies a variable. Variables contain primitive
///		types such as integers or floating point numbers. They may also
///		contain strings or references to objects. When an object is copied, 
///		certain fields such as the object name are always duplicated and so
///		when the the copied variable is no longer needed, it must be destroyed
///		via mprDestroyVar to release the allocated storeage. 
///		\n\n
///	@param ep ESP request handle.
///	@param var Name of the variable to copy. Variable names may be fully 
///		qualified object.property refererence. I.e. they may contain "." or
///		"[]". However, array indexes inside "[]" must be constant. If you 
///		require variable access with expresssion array indexes, use 
///		espEvalScript and define your script to just be the array reference.
///	@param value Pointer to a MprValue to contain the copied variable.
///	@param copyDepth Flags to specify how to copy the data inside the variable.
///		If \a copyDepth is MPR_DEEP_COPY, the all data fields are completely 
///		copies. If the source variable is an object, then all its properties
///		will also be copied. If these properties are themselves objects, they
///		will also be copied recursively. 
///		\n\n
///		If \a copyDepth is MPR_SHALLOW_COPY, objects will not be copied. Rather
///		the object's reference count will be incremented. Objects use
///		reference counts to assist the garbage collection mechanism. When the
///		reference count is zero, the object is discarded. For MPR_SHALLOW_COPY,
///		string data will still be copied.
///		\n\n
///		If \a copyDepth is 0 or MPR_NO_COPY, then no objects or strings are 
///		copied. Only primitive data and the string or object reference is 
///		copied. Object reference counts are not changed. Use care when using
///		MPR_NO_COPY particularly when running multithreaded.
///	@return Returns zero if successful, otherwise a negative MPR error code is
///		returned.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCreateObjVar, espCreateProperty, espGetProperty, 
///		espGetResult, espGetVar, espReadVar, espSetVar, mprCopyVar, mprDupVar


///	@fn int espReadVar(EspRequest *ep, char *var, MprVar *value);
///	@synopsis Read a variables value
///	@overview This function reads a variable without copying the data. 
///		Variables contain primitive types such as integers or floating point 
///		numbers. They may also contain strings or references to objects. 
///		This call returns a structure copy of the data. If the variable
///		contains a string or object, then the string/object pointer will 
///		be copied and the return value will have a reference into the ESP
///		object store. 
///
///		@warning Take care when using this function, especially when
///		multithreaded as it returns pointers into the ESP object store.
///		If possible, use the espGetVar function if possible.
///	@param ep ESP request handle.
///	@param var Name of the variable to copy. Variable names may be fully 
///		qualified object.property refererence. I.e. they may contain "." or
///		"[]". However, array indexes inside "[]" must be constant. If you 
///		require variable access with expresssion array indexes, use 
///		espEvalScript and define your script to just be the array reference.
///	@param value Pointer to a MprValue to contain the variable data.
///	@return Returns zero if successful, otherwise a negative MPR error code is
///		returned.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCopyVar, espCreateObjVar, espCreateProperty,
///		espGetProperty, espGetResult, espGetVar, espSetVar


///	@fn int espWriteVar(EspRequest *ep, char *var, MprVar *value);
///	@synopsis Write a variables value
///	@overview This function updates a variable's value in the ESP object store.
///		Variables contain primitive types such as integers or floating point 
///		numbers. They may also contain strings or references to objects. 
///		This call will do a "shallow" copy of the supplied variable. It will
///		copy strings and primitive types. However, it will not copy objects. 
///		Rather, it will increment the supplied object's reference counter.
///
///		If the variable does not already exist, this function will return an
///		error. If you need to create a property, use espCreateProperty.
///		If possible, use the espSetVar function which will create or update
///		a variable as required.
///	@param ep ESP request handle.
///	@param var Name of the variable to copy. Variable names may be fully 
///		qualified object.property refererence. I.e. they may contain "." or
///		"[]". However, array indexes inside "[]" must be constant. If you 
///		require variable access with expresssion array indexes, use 
///		espEvalScript and define your script to just be the array reference.
///	@param value Pointer to a MprValue containing the data to write.
///	@return Returns zero if successful, otherwise a negative MPR error code is
///		returned.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espGetResult, espGetVar, espCopyVar, espSetVar, espWriteVarValue


///	@fn int espWriteVarValue(EspRequest *ep, char *var, MprVar value);
///	@synopsis Write a variables value
///	@overview This function is similar to espWriteVar but is passed its value
///		to be written by "value". It is useful when writing variables created
///		by using the MprVar constructors. For example:
///
///		@code
///	espWriteVarValue(ep, "application.hitRate", mprCreateIntegerVar(i + 1));
///		@endcode
///
///		Variables contain primitive types such as integers or floating point 
///		numbers. They may also contain strings or references to objects. 
///		This call will do a "shallow" copy of the supplied variable. It will
///		copy strings and primitive types. However, it will not copy objects. 
///		Rather, it will increment the supplied object's reference counter.
///
///		If the variable does not already exist, this function will return an
///		error. If you need to create a property, use espCreateProperty.
///		If possible, use the espSetVar function which will create or update
///		a variable as required.
///	@param ep ESP request handle.
///	@param var Name of the variable to copy. Variable names may be fully 
///		qualified object.property refererence. I.e. they may contain "." or
///		"[]". However, array indexes inside "[]" must be constant. If you 
///		require variable access with expresssion array indexes, use 
///		espEvalScript and define your script to just be the array reference.
///	@param value MprValue containing the data to write.
///	@return Returns zero if successful, otherwise a negative MPR error code is
///		returned.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espGetResult, espGetVar, espCopyVar, espSetVar, espWriteVar


///	@fn int espDeleteVar(EspRequest *ep, char *var);
///	@synopsis Delete the named variable
///	@overview This function deletes the named variable. Variables contain 
///		primitive types such as integers or floating point 
///		numbers. They may also contain strings or references to objects. 
///	@param ep ESP request handle.
///	@param var Name of the variable to copy. Variable names may be fully 
///		qualified object.property refererence. I.e. they may contain "." or
///		"[]". However, array indexes inside "[]" must be constant. If you 
///		require variable access with expresssion array indexes, use 
///		espEvalScript and define your script to just be the array reference.
///	@return Returns zero if successful, otherwise a negative MPR error code is
///		returned.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espGetResult, espGetVar, espCopyVar, espSetVar, espWriteVar


///	@fn MprVar espCreateObjVar(char *name, int hashSize);
///	@synopsis Create a ESP object variable
///	@overview This call create an object variable with the standard ESP/EJS
///		properties and methods. Embedded JavaScript objects are created with
///		the toString and toValue methods defined. Once created, the underlying
///		object will have a reference count of 1. To destroy the object, call
///		mprDestroyVar which will decrement the reference count and will destroy 
///		the object if no-one is still using the object (ie. ref count == 0).
///	@param name Name of the variable. This name is not used for access and is
///		primarily used for debugging.
///	@param hashSize Size of the objects property index hash table.
///		 Objects index their properties using hash tables. If an 
///		object or array has many properties or elements, performance can be
///		enhanced by specifying a larger hash table size. Specify zero to
///		accept the default hash table size.
///	@return Returns the created object. If a memory allocation failure occurs,
///		the returned object will have a type set to MPR_TYPE_UNDEFINED.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCreateArrayVar, espDefineCFunction, espCreateProperty, mprCopyVar, 
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar,


///	@fn MprVar espCreateArrayVar(char *name, int size);
///	@synopsis Create a ESP array variable
///	@overview This call create an array variable with the standard ESP/EJS
///		array properties and methods. Embedded JavaScript array objects are 
///		created with the toString and toValue methods defined. Once created, 
///		the underlying array will have a reference count of 1. To destroy the 
///		array, call espDestroyVar which will decrement the reference count and 
///		will destroy the array if no-one is still using it (ie. ref count == 0).
///	@param name Name of the variable. This name is not used for access and is
///		primarily used for debugging.
///	@param size Initial size of the array.
///	@return Returns the created array object. If a memory allocation failure 
///		occurs, the returned object will have a type set to MPR_TYPE_UNDEFINED.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCreateObjVar, espDefineCFunction, espCreateProperty, mprCopyVar, 
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar,


///	@fn bool espDestroyVar(MprVar *obj);
///	@synopsis Destroy an ESP variable
///	@overview This call destroys an ESP variable and frees allocated storage.
///		If the variable represents an object, the object's reference count
///		will be decremented and if zero, the object will be destroyed.
///		If the object has properties that represent other objects, these too
///		will be destroyed recursively if their refererence counts are zero.
///		mprDestroyVar can intelligently handle circular references between
///		objects.
///		\n\n
///		mprDestroyVar intelligently destroys dynamicall allocated objects that
///		have been created via mprDupVar and statically copied object that have
///		been created using mprCreate or mprCopyVar.
///	@param obj Pointer to an ESP variable to destroy
///	@return Returns TRUE if they underlying data was freed. This will be false
///		for objects, if there are other users of the object. Otherwise, for 
///		all other types, it will be TRUE.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCreateObjVar, espDefineCFunction, espCreateProperty, mprCopyVar, 
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar,


///	@fn MprVar *espCreateProperty(MprVar *obj, char *property, 
///		MprVar *newValue);
///	@synopsis Create a property in the nominated object.
///	@overview This call creates and initializes a property in an object. 
///		The property must not already exist.
///	@param obj The object in which to create the property.
///	@param property Name of the property. This must be a simple JavaScript 
///		identifier without "." or "[]" characters.
///	@param newValue Pointer to a MprVar with which to initialize 
///		the property.
///	@return Returns a pointer to the created property. 
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateObjVar, mprCopyVar,
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar


///	@fn MprVar *espCreatePropertyValue(MprVar *obj, char *property, 
///		MprVar newValue);
///	@synopsis Create a property in the nominated object.
///	@overview This call creates and initializes a property in an object. 
///		The property must not already exist. This routine is very similar to
///		espCreateProperty except that the new value is passed by "value"
///		rather than by reference.
///	@param obj The object in which to create the property.
///	@param property Name of the property. This must be a simple JavaScript 
///		identifier without "." or "[]" characters.
///	@param newValue Value to with which to initialize the property.
///	@return Returns a pointer to the new property.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateObjVar, mprCopyVar,
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar


///	@fn int espDeleteProperty(MprVar *obj, char *property);
///	@synopsis Delete the property in the specified object.
///	@overview This call deletes a property from an object.
///	@param obj The object in which to delete the property.
///	@param property Name of the property to delete. This must be a simple 
///		JavaScript identifier without "." or "[]" characters.
///	@return Returns zero if sucssessful. Otherwise a negative MPR error code.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateProperty, espCreateObjVar, mprCopyVar,
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar


///	@fn MprVar *espGetProperty(MprVar *obj, char *property, MprVar *value);
///	@synopsis Get a property
///	@overview This call returns a pointer to a property and optionally sets
///		the \a value argument to the property's value. If \a value is 
///		not NULL and it points to a MprVar variable, espGetProperty will 
///		copy the property's value into \a value. This routine can be used to 
///		test if a property exists. If the referenced property is an object, 
///		this call will not affect the reference count. This call invokes 
///		READ triggers that have been defined on the property.
///	@param obj The object in which to get the property.
///	@param property Name of the property to access.
///	@param value Optional pointer to a MprVar to accept a copy of the data.
///		The caller does @e not need to destroy the value via mprDestroyVar.
///	@return Returns a pointer to the property variable. Returns zero if the
///		property cannot be found.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCreateProperty, espCreateObjVar, espDeleteProperty, 
///		espReadVar, espSetProperty, espWriteVar, mprCopyVar, 
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar


#if UNUSED
///	@fn int espReadProperty(MprVar *dest, MprVar *prop);
///	@synopsis Read a property's value.
///	@overview This call reads a property's value and stores a copy of its 
///		value in \a dest. It is assumed that the caller has obtained a property///		reference via espGetProperty or via espCreateProperty. The
///		espReadProperty call reads the data and invokes any registered trigger
///		routines. 
///
///		No data objects or strings are copied when reading. Thus the
///		caller does not need to call mprDestroyVar on the returned value.
///	@param dest Pointer to a MprVar to hold the read value of the property.
///	@param prop The object in which to delete the property.
///	@return Returns a pointer to the property variable. Returns zero if the
///		property cannot be found.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espCreateProperty, espCreateObjVar, espDeleteProperty, espGetProperty,
///		espReadVar, espWriteVar, mprCopyVar, mprCreateIntegerVar, 
///		mprCreateStringVar, mprDestroyVar
#endif


///	@fn MprVar *espSetProperty(MprVar *obj, char *property, MprVar *newValue)
///	@synopsis Update a property in the nominated object.
///	@overview This call updates a property's value. If it does not exist, 
///		the property is first created.
///	@param obj The object in which to update the property.
///	@param property Name of the variable. This name is not used for access and 
///		is primarily used for debugging.
///	@param newValue Pointer to a MprVar with which to initialize 
///		the property.
///	@return Returns the created property. If a memory allocation failure occurs,
///		the returned object will have a type set to MPR_TYPE_UNDEFINED.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateProperty, espGetProperty, 
///		espReadVar, espWriteVar, mprCopyVar, mprCreateIntegerVar, 
///		mprCreateStringVar, mprDestroyVar,


///	@fn MprVar *espSetPropertyValue(MprVar *obj, char *property, 
///		MprVar newValue);
///	@synopsis Update a property in the nominated object.
///	@overview This call updates a property's value. If it does not exist, 
///		the property is first created.
///	@param obj The object in which to update the property.
///	@param property Name of the variable. This name is not used for access and 
///		is primarily used for debugging.
///	@param newValue MprVar value with which to initialize the property.
///	@return Returns the created property. If a memory allocation failure occurs,
///		the returned object will have a type set to MPR_TYPE_UNDEFINED.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateProperty, espGetProperty,
///		espReadVar, espSetProperty, espWriteVar, mprCopyVar, 
///		mprCreateIntegerVar, mprCreateStringVar, mprDestroyVar,


#if UNUSED
///	@fn int espWriteProperty(MprVar *prop, MprVar *newValue);
///	@synopsis Update a property's value.
///	@overview This call updates a property's value and invokes any registered
///		triggers. It is assumed that the caller has obtained a property
///		reference via espGetProperty or via espCreateProperty.
///	@param prop Pointer to the property to update.
///	@param newValue Pointer to a MprVar value with which to update the property.
///	@return Returns zero if successful. Otherwise a negative MPR error code.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateProperty, espDeleteProperty, 
///		espGetProperty,
///		espReadVar, espSetProperty, espSetPropertyValue, 
///		espWritePropertyValue, espWriteVar, mprCopyVar, mprCreateIntegerVar, 
///		mprCreateStringVar, mprDestroyVar,


///	@fn int espWritePropertyValue(MprVar *prop, MprVar newValue);
///	@synopsis Update a property's value.
///	@overview This call updates a property's value and invokes any registered
///		triggers. It is assumed that the caller has obtained a property
///		reference via espGetProperty or via espCreateProperty.
///		This call is very similar to espWriteProperty except that the new
///		value is passed by "value" and not by reference.
///	@param prop Pointer to the property to update.
///	@param newValue MprVar value with which to update the property.
///	@return Returns zero if successful. Otherwise a negative MPR error code.
/// @library libesp, libappweb
/// @options Requires BLD_FEATURE_ESP_MODULE.
///	@see espDefineCFunction, espCreateProperty, espDeleteProperty, 
///		espGetProperty,
///		espReadVar, espSetProperty, espSetPropertyValue, 
///		espWriteProperty, espWriteVar, mprCopyVar, mprCreateIntegerVar, 
///		mprCreateStringVar, mprDestroyVar,
#endif


/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim: sw=4 ts=4 
 */
