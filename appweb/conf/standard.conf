#
#	appweb.conf -- Default Configuration for the Embedthis Appweb HTTP Server
#	
#	This configuration file controls the operation of the Appweb server. The 
#	order of configuration directives matters as this file is parsed only once.
#	You must put the server root and error log definitions first to ensure 
#	configuration errors are logged.
#

#
#	Root directory for Appweb to find necessary files and DLLs. 
#	Appweb will change directory to this location when it runs.
#
ServerRoot "/etc/appweb"


<if LOG>
	#
	#	Log all Appweb errors and trace to this file. This is the error 
	#	file for the whole server including all virtual hosts. 
	#
	ErrorLog "logs/error.log"

	#
	#	The log level can be a number between 0 and 9 (most verbose level).
	#
	LogLevel 2
</if>


#
#	Bind Appweb to listen for incoming requests on this address. Formats 
#	include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#	listen on all interfaces. If a port is omitted, then port 80 is used.

Listen 9997

<if SSL_MODULE>
	#
	#	SSL requests
	#
	Listen 9994
</if>


#
#	Name of the server to use for redirects and error responses to clients. 
#	Uncomment this line and replace it with the public name of your server. 
#	This host name and port do not get used for listening on sockets. If 
#	unspecified, Appweb will use the IP address for the host name.
#
#	ServerName http://localhost:9997

#
#	Location for documents for the primary server host. Virtual hosts 
#	may define their own DocumentRoot directives.
#
DocumentRoot "/var/appweb/web"

#
#	Send and receive inactivity timeout to close an idle TCP/IP connection
#
Timeout 60

#
#	The user name and group to switch to once Appweb has started.
#
Group nobody
User nobody

#
#	Default directory index to serve when a directory is requested.
#
DirectoryIndex index.html

#
#	Performance and security Limits. Feel free to reduce to enhance security.
#	Set the ThreadLimit to 0 for single-threaded use.
#
ThreadLimit 4
LimitClients 20
LimitResponseBody 16777216	
LimitScriptSize  131072	
LimitRequestBody 41943040
LimitRequestFields 512	
LimitRequestFieldSize 1048576
LimitRequestLine 32767
LimitUrl 30000
SendBufferSize 4096

#
#	Other Directives
#
# 	ErrorDocument 404 /notFound.html
# 	HttpChunking off
# 	StartThreads 4
# 	TraceMethod on
#	ThreadStackSize 65536
#
#	Redirect temp /pressRelease.html /fixedPressRelease.html
#	Redirect 410 /membersOnly 
#


#
#	Location of the mime translation file to map content types to 
#	file extensions. For other types, you can use AddType. 
#	"AddType application/x-appweb-other other"
#
TypesConfig mime.types


#
#	Search path for dynamically loadable modules. If modules have been 
#	statically linked into Appweb, this directive and LoadModule directives
#	will be ignored. This directive must be before any LoadModule directives.
#
LoadModulePath "../lib"


<if SSL_MODULE>
	LoadModule ssl libsslModule

	<if OPENSSL_MODULE>
		LoadModule openSsl libopenSslModule
	</if>

	<if MATRIXSSL_MODULE>
		LoadModule matrixSsl libmatrixSslModule
	</if>
</if>


#
#	The AddHandler directives will map handlers to file extensions. If the 
#	extension is ommitted, the handler itself will determine if a match to a 
#	given URL occurs. For example: authHandler is always run on all URLs. 
#	Handler matching to extensions occurs after the URL is descaped but before 
#	aliases are applied. WARNING: order matters.
#

<if ADMIN_MODULE>
	#
	#	The Admin module is for non-production debug use only.
	#
	LoadModule admin libadminModule
	AddHandler adminHandler 
	<Location /admin/>
	SetHandler adminHandler
	</Location>
</if>


<if AUTH_MODULE>
	LoadModule auth libauthModule
	AddHandler authHandler
	#
	#	Authorization directives for basic or digest authentication. You can
	#	add these here to apply to the entire server or put inside a 
	#	VirutalHost or Directory block. For example:
	#
	#		AuthGroupFile groups.db
	#		AuthUserFile users.db
	#		AuthDigestQop auth
	#		<Directory $DOCUMENT_ROOT/basic/acme>
	#			AuthType basic
	#			AuthName "Acme Inc"
	#			Require valid-user
	#		</Directory>
	#		<Directory $DOCUMENT_ROOT/digest/acme>
	#			AuthType digest
	#			AuthName "Acme Inc"
	#			Require valid-user
	#		</Directory>
	#
</if>


#
#	The put modules supports the HTTP PUT and DELETE methods
#
<if PUT_MODULE>
	LoadModule put libputModule
	AddHandler putHandler
</if>


#
#	The dir modules is mandatory and supports directory redirections and 
#	directory listings.
#
<if DIR_MODULE>
	LoadModule dir libdirModule
	AddHandler dirHandler
	#
	#	Directory listings
	#
	Options Indexes
	IndexOrder ascending name
	IndexOptions FancyIndexing FoldersFirst
</if>


#
#	The upload modules supports file upload
#
<if UPLOAD_MODULE>
	LoadModule upload 	libuploadModule
	#
	#	This will allow the upload handler to service requests that have /upload/ 
	#	as the start of their URL. 
	#
	<Location /upload/>
		AddHandler uploadHandler
		FileUploadDir /tmp
	</Location>
</if>


#
#	The EGI module supports the Embedded Gateway Interface which is a fast 
#	in-memory alternative to CGI.
#
<if EGI_MODULE>
	LoadModule egi libegiModule
	AddHandler egiHandler .egi
	<Location /egi/>
		SetHandler egiHandler
		ExtraPath on
	</Location>

	<if GACOMPAT_MODULE>
		#
		#	Just for compatibility with the GoAhead WebServer
		#
		<Location /goform/>
			SetHandler egiHandler
			ExtraPath on
		</Location>
	</if>
</if>


#
#	For CGI scripts, such as your Perl scripts make sure that you have 
#	"#!/PerlPath" as the first line. This works on Windows as well.
#	The .bat and .cmd extensions are really only for Windows.
#	
<if CGI_MODULE>
	LoadModule cgi libcgiModule
	AddHandler cgiHandler .cgi .cgi-nph .bat .cmd .pl .py
	ScriptAlias /cgi-bin/ "$DOCUMENT_ROOT/cgi-bin"
	#
	#	These actions specify the program to run for each Perl or Python 
	#	script. They map to the extensions specified in the mime.types for for 
	#	these mime types. Alternatively, you may use put all your scripts in 
	#	the subdirectories specified by the releavant Location blocks below.
	#	For perl and python, you can also put "#!/path/to/program" as the first 
	#	line. This works on Windows as well. The .bat and .cmd extensions are 
	#	really only for Windows. For Windows, update the program paths with
	#	the right paths.
	#	
	Action application/x-appweb-perl /usr/bin/perl
	Action application/x-appweb-python /usr/bin/python
</if>


#
#	The ESP modules supports the Embedded Server Pages for server side
#	Javascript based web programming.
#
<if ESP_MODULE>
	LoadModule esp libespModule
	AddHandler espHandler .esp .asp
	#
	#	Apply handlers to given URL prefixes. I.e. this will run the Esp
	#	handler for all URLs that begin with "/esp".
	#
	<Location /esp/>
		SetHandler espHandler
	</Location>

	#
	#	Send errors to user's browser. Change to "log" for production systems.
	#
	EspErrors browser
</if>


#
#	The PHP language module. Careful, the PHP language is big.
#
<if PHP5_MODULE>
	LoadModule php5 libphp5Module
	AddHandler php5Handler .php
</if>


#
#	The copy modules supports requests for static web pages.
#
<if COPY_MODULE>
	LoadModule copy libcopyModule
	AddHandler copyHandler 
</if>


<if C_API_MODULE>
	LoadModule capi libcapiModule
</if>


<if GACOMPAT_MODULE>
	#
	#	This is the GoAhead WebServer compatibility module
	#
	LoadModule compat libcompatModule
</if>


#
#	Access to the Appweb documentation. Delete this in production systems.
#
<if DOC>
	Alias /doc/ "/usr/share/appweb-1.1.3/doc/"
	<Location /doc/>
		AddHandler copyHandler 
	</Location>
</if>

<if ACCESS_LOG
	#
	#	Define the log format for the access log.
	#
	CustomLog logs/access.log "%h %l %u %t \"%r\" %>s %b"
</if>



<if KEEP_ALIVE>
	#
	# 	Define persisten connections where one TCP/IP connection may serve
	#	multiple HTTP requests. (A definite performance boost)
	#
	KeepAlive on

	#
	#	Number of seconds to wait for the next HTTP request before closing 
	#	the TCP/IP connection.
	#
	KeepAliveTimeout 60

	#
	#	Number of HTTP requests to accept on a single TCP/IP connection
	#	Reduce this number to minimize the chance of DoS attacks.
	#
	MaxKeepAliveRequests 1000
</if>


<if SESSION>
	#
	#	Default session timeout (30 mins in seconds)
	#
	SessionTimeout 1800

	#
	#	Auto create sessions for ESP
	#
	# SessionAutoCreate on
</if>

#
#	This virtual host will process SSL requests
#
<if SSL_MODULE>
	<VirtualHost *:9994>
		DocumentRoot "/var/www/appweb-default"
		SSLEngine on
		SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
		SSLProtocol ALL -SSLV2

		#
		#	WARNING: you must regenerate the server.crt and server.key.pem
		#
		SSLCertificateFile "$SERVER_ROOT/server.crt"

		#
		#	WARNING: we are using the decrypted key here so it won't prompt for the
		#	password. Replace with server.key for higher security.
		#
		SSLCertificateKeyFile "$SERVER_ROOT/server.key.pem"

		#
		# Add these directives to require and verify client certificates
		#
		# SSLVerifyClient require
		# SSLCACertificateFile "$SERVER_ROOT/ca.crt"
		# SSLCACertificatePath "$SERVER_ROOT/certs"
		<if DOC>
			Alias /doc/ "/usr/share/appweb-1.1.3/doc/"
		</if>
	</VirtualHost>                                  
</if>

#
#	Sample Virtual host directives supporting both Named and IP virtual hosts
#	Note: you can nest Directory and Location directives inside VirtuaHost 
#	directives. To use these, you will also need to add the relevant Listen 
#	directives above. E.g. (Listen 5556).
#
#		NameVirtualHost *:5556
#		<VirtualHost *:5556>
#			ServerName		www.myHost.com
#			DocumentRoot	"$SERVER_ROOT/myHost"
#			ScriptAlias 	"/cgi-bin/" "$SERVER_ROOT/web/cgi-bin/"
#		</VirtualHost>
#		
#		<VirtualHost *:5556>
#			ServerName		www.yourHost.com
#			DocumentRoot	"$SERVER_ROOT/yourHost"
#			ResetHandlers
#			AddHandler espHandler .myEsp
#			AddHandler egiHandler
#			DirectoryIndex index.myEsp
#			<Location /myEgi>
#				SetHandler egiHandler
#				ExtraPath on
#			</Location>
#		</VirtualHost>
