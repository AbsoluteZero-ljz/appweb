#
#   appweb-windows-openssl_10.nmake -- Makefile to build Embedthis Appweb for windows
#

NAME                  = appweb
VERSION               = 8.2.3

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = openssl_10
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_CGI)" == ""
ME_COM_CGI            = 1
!ENDIF
!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_DIR)" == ""
ME_COM_DIR            = 0
!ENDIF
!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 0
!ENDIF
!IF "$(ME_COM_ESP)" == ""
ME_COM_ESP            = 1
!ENDIF
!IF "$(ME_COM_FAST)" == ""
ME_COM_FAST           = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == ""
ME_COM_MATRIXSSL      = 0
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == ""
ME_COM_MBEDTLS        = 0
!ENDIF
!IF "$(ME_COM_MDB)" == ""
ME_COM_MDB            = 1
!ENDIF
!IF "$(ME_COM_MPR)" == ""
ME_COM_MPR            = 1
!ENDIF
!IF "$(ME_COM_NANOSSL)" == ""
ME_COM_NANOSSL        = 0
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 1
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_PHP)" == ""
ME_COM_PHP            = 0
!ENDIF
!IF "$(ME_COM_PROXY)" == ""
ME_COM_PROXY          = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 0
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_WATCHDOG)" == ""
ME_COM_WATCHDOG       = 1
!ENDIF

!IF "$(ME_COM_OPENSSL_PATH)" == ""
ME_COM_OPENSSL_PATH   = "/path/to/openssl"
!ENDIF

!IF "$(ME_COM_LIB)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_LINK)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_MBEDTLS)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_OPENSSL)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_RC)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_MDB)" == ""
ME_COM_MDB            = 1
!ENDIF


CC                    = cl
LD                    = link
AR                    = lib
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -DME_DEBUG=1 -DME_COM_CGI=$(ME_COM_CGI) -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_DIR=$(ME_COM_DIR) -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_ESP=$(ME_COM_ESP) -DME_COM_FAST=$(ME_COM_FAST) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MATRIXSSL=$(ME_COM_MATRIXSSL) -DME_COM_MBEDTLS=$(ME_COM_MBEDTLS) -DME_COM_MDB=$(ME_COM_MDB) -DME_COM_MPR=$(ME_COM_MPR) -DME_COM_NANOSSL=$(ME_COM_NANOSSL) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_PHP=$(ME_COM_PHP) -DME_COM_PROXY=$(ME_COM_PROXY) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_WATCHDOG=$(ME_COM_WATCHDOG) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -incremental:no -dynamicbase -nxcompat -debug -machine:x64
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis Appweb
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


TARGETS               = $(TARGETS) build\$(CONFIG)\bin\appweb.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\appwebMonitor.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\appwebMonitor.ico
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\authpass.exe
!IF "$(ME_COM_ESP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\appweb-esp.exe
!ENDIF
!IF "$(ME_COM_ESP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\.extras-modified
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\http.exe
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\.install-certs-modified
!IF "$(ME_COM_SQLITE)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libsql.dll
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\makerom.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\server.exe
TARGETS               = $(TARGETS) src\server\cache
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\appman.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\appweb-windows-openssl_10-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\appweb.obj" del /Q "build\$(CONFIG)\obj\appweb.obj"
	if exist "build\$(CONFIG)\obj\appwebMonitor.obj" del /Q "build\$(CONFIG)\obj\appwebMonitor.obj"
	if exist "build\$(CONFIG)\obj\authpass.obj" del /Q "build\$(CONFIG)\obj\authpass.obj"
	if exist "build\$(CONFIG)\obj\cgiHandler.obj" del /Q "build\$(CONFIG)\obj\cgiHandler.obj"
	if exist "build\$(CONFIG)\obj\cgiProgram.obj" del /Q "build\$(CONFIG)\obj\cgiProgram.obj"
	if exist "build\$(CONFIG)\obj\config.obj" del /Q "build\$(CONFIG)\obj\config.obj"
	if exist "build\$(CONFIG)\obj\convenience.obj" del /Q "build\$(CONFIG)\obj\convenience.obj"
	if exist "build\$(CONFIG)\obj\esp.obj" del /Q "build\$(CONFIG)\obj\esp.obj"
	if exist "build\$(CONFIG)\obj\espHandler.obj" del /Q "build\$(CONFIG)\obj\espHandler.obj"
	if exist "build\$(CONFIG)\obj\espLib.obj" del /Q "build\$(CONFIG)\obj\espLib.obj"
	if exist "build\$(CONFIG)\obj\fastHandler.obj" del /Q "build\$(CONFIG)\obj\fastHandler.obj"
	if exist "build\$(CONFIG)\obj\fastProgram.obj" del /Q "build\$(CONFIG)\obj\fastProgram.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\makerom.obj" del /Q "build\$(CONFIG)\obj\makerom.obj"
	if exist "build\$(CONFIG)\obj\mbedtls.obj" del /Q "build\$(CONFIG)\obj\mbedtls.obj"
	if exist "build\$(CONFIG)\obj\mpr-mbedtls.obj" del /Q "build\$(CONFIG)\obj\mpr-mbedtls.obj"
	if exist "build\$(CONFIG)\obj\mpr-openssl.obj" del /Q "build\$(CONFIG)\obj\mpr-openssl.obj"
	if exist "build\$(CONFIG)\obj\mpr-version.obj" del /Q "build\$(CONFIG)\obj\mpr-version.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\proxyHandler.obj" del /Q "build\$(CONFIG)\obj\proxyHandler.obj"
	if exist "build\$(CONFIG)\obj\rom.obj" del /Q "build\$(CONFIG)\obj\rom.obj"
	if exist "build\$(CONFIG)\obj\server.obj" del /Q "build\$(CONFIG)\obj\server.obj"
	if exist "build\$(CONFIG)\obj\sqlite.obj" del /Q "build\$(CONFIG)\obj\sqlite.obj"
	if exist "build\$(CONFIG)\obj\sqlite3.obj" del /Q "build\$(CONFIG)\obj\sqlite3.obj"
	if exist "build\$(CONFIG)\obj\testHandler.obj" del /Q "build\$(CONFIG)\obj\testHandler.obj"
	if exist "build\$(CONFIG)\obj\watchdog.obj" del /Q "build\$(CONFIG)\obj\watchdog.obj"
	if exist "build\$(CONFIG)\bin\appweb.exe" del /Q "build\$(CONFIG)\bin\appweb.exe"
	if exist "build\$(CONFIG)\bin\appweb.lib" del /Q "build\$(CONFIG)\bin\appweb.lib"
	if exist "build\$(CONFIG)\bin\appweb.pdb" del /Q "build\$(CONFIG)\bin\appweb.pdb"
	if exist "build\$(CONFIG)\bin\appweb.exp" del /Q "build\$(CONFIG)\bin\appweb.exp"
	if exist "build\$(CONFIG)\bin\appwebMonitor.exe" del /Q "build\$(CONFIG)\bin\appwebMonitor.exe"
	if exist "build\$(CONFIG)\bin\appwebMonitor.lib" del /Q "build\$(CONFIG)\bin\appwebMonitor.lib"
	if exist "build\$(CONFIG)\bin\appwebMonitor.pdb" del /Q "build\$(CONFIG)\bin\appwebMonitor.pdb"
	if exist "build\$(CONFIG)\bin\appwebMonitor.exp" del /Q "build\$(CONFIG)\bin\appwebMonitor.exp"
	if exist "build\$(CONFIG)\bin\appwebMonitor.ico" del /Q "build\$(CONFIG)\bin\appwebMonitor.ico"
	if exist "build\$(CONFIG)\bin\authpass.exe" del /Q "build\$(CONFIG)\bin\authpass.exe"
	if exist "build\$(CONFIG)\bin\authpass.lib" del /Q "build\$(CONFIG)\bin\authpass.lib"
	if exist "build\$(CONFIG)\bin\authpass.pdb" del /Q "build\$(CONFIG)\bin\authpass.pdb"
	if exist "build\$(CONFIG)\bin\authpass.exp" del /Q "build\$(CONFIG)\bin\authpass.exp"
	if exist "build\$(CONFIG)\bin\appweb-esp.exe" del /Q "build\$(CONFIG)\bin\appweb-esp.exe"
	if exist "build\$(CONFIG)\bin\appweb-esp.lib" del /Q "build\$(CONFIG)\bin\appweb-esp.lib"
	if exist "build\$(CONFIG)\bin\appweb-esp.pdb" del /Q "build\$(CONFIG)\bin\appweb-esp.pdb"
	if exist "build\$(CONFIG)\bin\appweb-esp.exp" del /Q "build\$(CONFIG)\bin\appweb-esp.exp"
	if exist "build\$(CONFIG)\.extras-modified" del /Q "build\$(CONFIG)\.extras-modified"
	if exist "build\$(CONFIG)\bin\http.exe" del /Q "build\$(CONFIG)\bin\http.exe"
	if exist "build\$(CONFIG)\bin\http.lib" del /Q "build\$(CONFIG)\bin\http.lib"
	if exist "build\$(CONFIG)\bin\http.pdb" del /Q "build\$(CONFIG)\bin\http.pdb"
	if exist "build\$(CONFIG)\bin\http.exp" del /Q "build\$(CONFIG)\bin\http.exp"
	if exist "build\$(CONFIG)\.install-certs-modified" del /Q "build\$(CONFIG)\.install-certs-modified"
	if exist "build\$(CONFIG)\bin\libappweb.dll" del /Q "build\$(CONFIG)\bin\libappweb.dll"
	if exist "build\$(CONFIG)\bin\libappweb.lib" del /Q "build\$(CONFIG)\bin\libappweb.lib"
	if exist "build\$(CONFIG)\bin\libappweb.pdb" del /Q "build\$(CONFIG)\bin\libappweb.pdb"
	if exist "build\$(CONFIG)\bin\libappweb.exp" del /Q "build\$(CONFIG)\bin\libappweb.exp"
	if exist "build\$(CONFIG)\bin\libesp.dll" del /Q "build\$(CONFIG)\bin\libesp.dll"
	if exist "build\$(CONFIG)\bin\libesp.lib" del /Q "build\$(CONFIG)\bin\libesp.lib"
	if exist "build\$(CONFIG)\bin\libesp.pdb" del /Q "build\$(CONFIG)\bin\libesp.pdb"
	if exist "build\$(CONFIG)\bin\libesp.exp" del /Q "build\$(CONFIG)\bin\libesp.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libmpr-openssl.lib" del /Q "build\$(CONFIG)\bin\libmpr-openssl.lib"
	if exist "build\$(CONFIG)\bin\libmpr-version.lib" del /Q "build\$(CONFIG)\bin\libmpr-version.lib"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libsql.dll" del /Q "build\$(CONFIG)\bin\libsql.dll"
	if exist "build\$(CONFIG)\bin\libsql.lib" del /Q "build\$(CONFIG)\bin\libsql.lib"
	if exist "build\$(CONFIG)\bin\libsql.pdb" del /Q "build\$(CONFIG)\bin\libsql.pdb"
	if exist "build\$(CONFIG)\bin\libsql.exp" del /Q "build\$(CONFIG)\bin\libsql.exp"
	if exist "build\$(CONFIG)\bin\makerom.exe" del /Q "build\$(CONFIG)\bin\makerom.exe"
	if exist "build\$(CONFIG)\bin\makerom.lib" del /Q "build\$(CONFIG)\bin\makerom.lib"
	if exist "build\$(CONFIG)\bin\makerom.pdb" del /Q "build\$(CONFIG)\bin\makerom.pdb"
	if exist "build\$(CONFIG)\bin\makerom.exp" del /Q "build\$(CONFIG)\bin\makerom.exp"
	if exist "build\$(CONFIG)\bin\server.exe" del /Q "build\$(CONFIG)\bin\server.exe"
	if exist "build\$(CONFIG)\bin\server.lib" del /Q "build\$(CONFIG)\bin\server.lib"
	if exist "build\$(CONFIG)\bin\server.pdb" del /Q "build\$(CONFIG)\bin\server.pdb"
	if exist "build\$(CONFIG)\bin\server.exp" del /Q "build\$(CONFIG)\bin\server.exp"
	if exist "build\$(CONFIG)\bin\appman.exe" del /Q "build\$(CONFIG)\bin\appman.exe"
	if exist "build\$(CONFIG)\bin\appman.lib" del /Q "build\$(CONFIG)\bin\appman.lib"
	if exist "build\$(CONFIG)\bin\appman.pdb" del /Q "build\$(CONFIG)\bin\appman.pdb"
	if exist "build\$(CONFIG)\bin\appman.exp" del /Q "build\$(CONFIG)\bin\appman.exp"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_1)

#
#   osdep.h
#
DEPS_2 = $(DEPS_2) src\osdep\osdep.h
DEPS_2 = $(DEPS_2) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_2)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_3 = $(DEPS_3) src\mpr\mpr.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_3)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   http.h
#
DEPS_4 = $(DEPS_4) src\http\http.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_4)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   appweb.h
#
DEPS_5 = $(DEPS_5) src\appweb.h
DEPS_5 = $(DEPS_5) build\$(CONFIG)\inc\osdep.h
DEPS_5 = $(DEPS_5) build\$(CONFIG)\inc\mpr.h
DEPS_5 = $(DEPS_5) build\$(CONFIG)\inc\http.h

build\$(CONFIG)\inc\appweb.h: $(DEPS_5)
	@echo ..... [Copy] build\$(CONFIG)\inc\appweb.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\appweb.h+modified build\$(CONFIG)\inc\appweb.h $(LOG)

#
#   appwebMonitor.h
#
DEPS_6 = $(DEPS_6) src\server\windows\appwebMonitor.h

build\$(CONFIG)\inc\appwebMonitor.h: $(DEPS_6)
	@echo ..... [Copy] build\$(CONFIG)\inc\appwebMonitor.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\server\windows\appwebMonitor.h+modified build\$(CONFIG)\inc\appwebMonitor.h $(LOG)

#
#   config.h
#

build\$(CONFIG)\inc\config.h: $(DEPS_7)

#
#   customize.h
#
DEPS_8 = $(DEPS_8) src\customize.h

build\$(CONFIG)\inc\customize.h: $(DEPS_8)
	@echo ..... [Copy] build\$(CONFIG)\inc\customize.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\customize.h+modified build\$(CONFIG)\inc\customize.h $(LOG)

#
#   embedtls.h
#
DEPS_9 = $(DEPS_9) src\mbedtls\embedtls.h

build\$(CONFIG)\inc\embedtls.h: $(DEPS_9)
	@echo ..... [Copy] build\$(CONFIG)\inc\embedtls.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mbedtls\embedtls.h+modified build\$(CONFIG)\inc\embedtls.h $(LOG)

#
#   esp.h
#
DEPS_10 = $(DEPS_10) src\esp\esp.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\me.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\osdep.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\http.h

build\$(CONFIG)\inc\esp.h: $(DEPS_10)
	@echo ..... [Copy] build\$(CONFIG)\inc\esp.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\esp\esp.h+modified build\$(CONFIG)\inc\esp.h $(LOG)

#
#   mbedtls.h
#
DEPS_11 = $(DEPS_11) src\mbedtls\mbedtls.h

build\$(CONFIG)\inc\mbedtls.h: $(DEPS_11)
	@echo ..... [Copy] build\$(CONFIG)\inc\mbedtls.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mbedtls\mbedtls.h+modified build\$(CONFIG)\inc\mbedtls.h $(LOG)

#
#   monitorResources.h
#
DEPS_12 = $(DEPS_12) src\server\windows\monitorResources.h

build\$(CONFIG)\inc\monitorResources.h: $(DEPS_12)
	@echo ..... [Copy] build\$(CONFIG)\inc\monitorResources.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\server\windows\monitorResources.h+modified build\$(CONFIG)\inc\monitorResources.h $(LOG)

#
#   mpr-version.h
#
DEPS_13 = $(DEPS_13) src\mpr-version\mpr-version.h
DEPS_13 = $(DEPS_13) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\mpr-version.h: $(DEPS_13)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr-version.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr-version\mpr-version.h+modified build\$(CONFIG)\inc\mpr-version.h $(LOG)

#
#   pcre.h
#
DEPS_14 = $(DEPS_14) src\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_14)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   sqlite3.h
#
DEPS_15 = $(DEPS_15) src\sqlite\sqlite3.h

build\$(CONFIG)\inc\sqlite3.h: $(DEPS_15)
	@echo ..... [Copy] build\$(CONFIG)\inc\sqlite3.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\sqlite\sqlite3.h+modified build\$(CONFIG)\inc\sqlite3.h $(LOG)

#
#   sqlite3rtree.h
#

build\$(CONFIG)\inc\sqlite3rtree.h: $(DEPS_16)

#
#   windows.h
#

build\$(CONFIG)\inc\windows.h: $(DEPS_17)

#
#   appweb.obj
#
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\appweb.h

build\$(CONFIG)\obj\appweb.obj: \
    src\server\appweb.c $(DEPS_18)
	@echo .. [Compile] build\$(CONFIG)\obj\appweb.obj
	"$(CC)" -c -Fo$(BUILD)\obj\appweb.obj -Fd$(BUILD)\obj\appweb.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\server\appweb.c $(LOG)

#
#   appwebMonitor.obj
#
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\appwebMonitor.obj: \
    src\server\windows\appwebMonitor.c $(DEPS_19)
	@echo .. [Compile] build\$(CONFIG)\obj\appwebMonitor.obj
	"$(CC)" -c -Fo$(BUILD)\obj\appwebMonitor.obj -Fd$(BUILD)\obj\appwebMonitor.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\server\windows\appwebMonitor.c $(LOG)

#
#   appwebMonitor.res
#

build\$(CONFIG)\obj\appwebMonitor.res: \
        src\server\windows\appwebMonitor.rc $(DEPS_20)
	@echo .. [Compile] build\$(CONFIG)\obj\appwebMonitor.res
	"$(RC)" -nologo -Fo $(BUILD)\obj\appwebMonitor.res src\server\windows\appwebMonitor.rc

#
#   authpass.obj
#
DEPS_21 = $(DEPS_21) build\$(CONFIG)\inc\appweb.h

build\$(CONFIG)\obj\authpass.obj: \
    src\utils\authpass.c $(DEPS_21)
	@echo .. [Compile] build\$(CONFIG)\obj\authpass.obj
	"$(CC)" -c -Fo$(BUILD)\obj\authpass.obj -Fd$(BUILD)\obj\authpass.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\utils\authpass.c $(LOG)

#
#   appweb.h
#

src\appweb.h: $(DEPS_22)

#
#   cgiHandler.obj
#
DEPS_23 = $(DEPS_23) src\appweb.h

build\$(CONFIG)\obj\cgiHandler.obj: \
    src\modules\cgiHandler.c $(DEPS_23)
	@echo .. [Compile] build\$(CONFIG)\obj\cgiHandler.obj
	"$(CC)" -c -Fo$(BUILD)\obj\cgiHandler.obj -Fd$(BUILD)\obj\cgiHandler.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\modules\cgiHandler.c $(LOG)

#
#   cgiProgram.obj
#

build\$(CONFIG)\obj\cgiProgram.obj: \
    src\utils\cgiProgram.c $(DEPS_24)
	@echo .. [Compile] build\$(CONFIG)\obj\cgiProgram.obj
	"$(CC)" -c -Fo$(BUILD)\obj\cgiProgram.obj -Fd$(BUILD)\obj\cgiProgram.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\utils\cgiProgram.c $(LOG)

#
#   config.obj
#
DEPS_25 = $(DEPS_25) src\appweb.h
DEPS_25 = $(DEPS_25) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\config.obj: \
    src\config.c $(DEPS_25)
	@echo .. [Compile] build\$(CONFIG)\obj\config.obj
	"$(CC)" -c -Fo$(BUILD)\obj\config.obj -Fd$(BUILD)\obj\config.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\config.c $(LOG)

#
#   convenience.obj
#
DEPS_26 = $(DEPS_26) src\appweb.h

build\$(CONFIG)\obj\convenience.obj: \
    src\convenience.c $(DEPS_26)
	@echo .. [Compile] build\$(CONFIG)\obj\convenience.obj
	"$(CC)" -c -Fo$(BUILD)\obj\convenience.obj -Fd$(BUILD)\obj\convenience.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\convenience.c $(LOG)

#
#   esp.h
#

src\esp\esp.h: $(DEPS_27)

#
#   esp.obj
#
DEPS_28 = $(DEPS_28) src\esp\esp.h
DEPS_28 = $(DEPS_28) build\$(CONFIG)\inc\mpr-version.h

build\$(CONFIG)\obj\esp.obj: \
    src\esp\esp.c $(DEPS_28)
	@echo .. [Compile] build\$(CONFIG)\obj\esp.obj
	"$(CC)" -c -Fo$(BUILD)\obj\esp.obj -Fd$(BUILD)\obj\esp.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\esp\esp.c $(LOG)

#
#   espHandler.obj
#
DEPS_29 = $(DEPS_29) src\appweb.h
DEPS_29 = $(DEPS_29) build\$(CONFIG)\inc\esp.h

build\$(CONFIG)\obj\espHandler.obj: \
    src\modules\espHandler.c $(DEPS_29)
	@echo .. [Compile] build\$(CONFIG)\obj\espHandler.obj
	"$(CC)" -c -Fo$(BUILD)\obj\espHandler.obj -Fd$(BUILD)\obj\espHandler.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\modules\espHandler.c $(LOG)

#
#   espLib.obj
#
DEPS_30 = $(DEPS_30) src\esp\esp.h
DEPS_30 = $(DEPS_30) build\$(CONFIG)\inc\pcre.h
DEPS_30 = $(DEPS_30) build\$(CONFIG)\inc\http.h

build\$(CONFIG)\obj\espLib.obj: \
    src\esp\espLib.c $(DEPS_30)
	@echo .. [Compile] build\$(CONFIG)\obj\espLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\espLib.obj -Fd$(BUILD)\obj\espLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\esp\espLib.c $(LOG)

#
#   fastHandler.obj
#
DEPS_31 = $(DEPS_31) src\appweb.h

build\$(CONFIG)\obj\fastHandler.obj: \
    src\modules\fastHandler.c $(DEPS_31)
	@echo .. [Compile] build\$(CONFIG)\obj\fastHandler.obj
	"$(CC)" -c -Fo$(BUILD)\obj\fastHandler.obj -Fd$(BUILD)\obj\fastHandler.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\modules\fastHandler.c $(LOG)

#
#   fcgiapp.h
#

..\..\..\..\usr\local\include\fcgiapp.h: $(DEPS_32)

#
#   fastProgram.obj
#
DEPS_33 = $(DEPS_33) ..\..\..\..\usr\local\include\fcgiapp.h

build\$(CONFIG)\obj\fastProgram.obj: \
    src\utils\fastProgram.c $(DEPS_33)
	@echo .. [Compile] build\$(CONFIG)\obj\fastProgram.obj
	"$(CC)" -c -Fo$(BUILD)\obj\fastProgram.obj -Fd$(BUILD)\obj\fastProgram.pdb $(CFLAGS) $(DFLAGS) "-I\usr\local\include" src\utils\fastProgram.c $(LOG)

#
#   http.h
#

src\http\http.h: $(DEPS_34)

#
#   http.obj
#
DEPS_35 = $(DEPS_35) src\http\http.h

build\$(CONFIG)\obj\http.obj: \
    src\http\http.c $(DEPS_35)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\http\http.c $(LOG)

#
#   httpLib.obj
#
DEPS_36 = $(DEPS_36) src\http\http.h
DEPS_36 = $(DEPS_36) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\http\httpLib.c $(DEPS_36)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\http\httpLib.c $(LOG)

#
#   makerom.obj
#
DEPS_37 = $(DEPS_37) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\makerom.obj: \
    src\makerom\makerom.c $(DEPS_37)
	@echo .. [Compile] build\$(CONFIG)\obj\makerom.obj
	"$(CC)" -c -Fo$(BUILD)\obj\makerom.obj -Fd$(BUILD)\obj\makerom.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\makerom\makerom.c $(LOG)

#
#   mbedtls.h
#

src\mbedtls\mbedtls.h: $(DEPS_38)

#
#   mbedtls.obj
#
DEPS_39 = $(DEPS_39) src\mbedtls\mbedtls.h

build\$(CONFIG)\obj\mbedtls.obj: \
    src\mbedtls\mbedtls.c $(DEPS_39)
	@echo .. [Compile] build\$(CONFIG)\obj\mbedtls.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mbedtls.obj -Fd$(BUILD)\obj\mbedtls.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) src\mbedtls\mbedtls.c $(LOG)

#
#   mpr-mbedtls.obj
#
DEPS_40 = $(DEPS_40) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\mpr-mbedtls.obj: \
    src\mpr-mbedtls\mpr-mbedtls.c $(DEPS_40)
	@echo .. [Compile] build\$(CONFIG)\obj\mpr-mbedtls.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mpr-mbedtls.obj -Fd$(BUILD)\obj\mpr-mbedtls.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) src\mpr-mbedtls\mpr-mbedtls.c $(LOG)

#
#   mpr-openssl.obj
#
DEPS_41 = $(DEPS_41) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\mpr-openssl.obj: \
    src\mpr-openssl\mpr-openssl.c $(DEPS_41)
	@echo .. [Compile] build\$(CONFIG)\obj\mpr-openssl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mpr-openssl.obj -Fd$(BUILD)\obj\mpr-openssl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) "-I$(BUILD)\inc" "-I$(ME_COM_OPENSSL_PATH)\inc32" src\mpr-openssl\mpr-openssl.c $(LOG)

#
#   mpr-version.h
#

src\mpr-version\mpr-version.h: $(DEPS_42)

#
#   mpr-version.obj
#
DEPS_43 = $(DEPS_43) src\mpr-version\mpr-version.h
DEPS_43 = $(DEPS_43) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\mpr-version.obj: \
    src\mpr-version\mpr-version.c $(DEPS_43)
	@echo .. [Compile] build\$(CONFIG)\obj\mpr-version.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mpr-version.obj -Fd$(BUILD)\obj\mpr-version.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\mpr-version\mpr-version.c $(LOG)

#
#   mpr.h
#

src\mpr\mpr.h: $(DEPS_44)

#
#   mprLib.obj
#
DEPS_45 = $(DEPS_45) src\mpr\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\mpr\mprLib.c $(DEPS_45)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\mpr\mprLib.c $(LOG)

#
#   pcre.h
#

src\pcre\pcre.h: $(DEPS_46)

#
#   pcre.obj
#
DEPS_47 = $(DEPS_47) build\$(CONFIG)\inc\me.h
DEPS_47 = $(DEPS_47) src\pcre\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\pcre\pcre.c $(DEPS_47)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre\pcre.c $(LOG)

#
#   proxyHandler.obj
#
DEPS_48 = $(DEPS_48) src\appweb.h

build\$(CONFIG)\obj\proxyHandler.obj: \
    src\modules\proxyHandler.c $(DEPS_48)
	@echo .. [Compile] build\$(CONFIG)\obj\proxyHandler.obj
	"$(CC)" -c -Fo$(BUILD)\obj\proxyHandler.obj -Fd$(BUILD)\obj\proxyHandler.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\modules\proxyHandler.c $(LOG)

#
#   rom.obj
#
DEPS_49 = $(DEPS_49) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\rom.obj: \
    src\rom.c $(DEPS_49)
	@echo .. [Compile] build\$(CONFIG)\obj\rom.obj
	"$(CC)" -c -Fo$(BUILD)\obj\rom.obj -Fd$(BUILD)\obj\rom.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\rom.c $(LOG)

#
#   server.obj
#
DEPS_50 = $(DEPS_50) src\http\http.h

build\$(CONFIG)\obj\server.obj: \
    src\http\server.c $(DEPS_50)
	@echo .. [Compile] build\$(CONFIG)\obj\server.obj
	"$(CC)" -c -Fo$(BUILD)\obj\server.obj -Fd$(BUILD)\obj\server.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\http\server.c $(LOG)

#
#   sqlite3.h
#

src\sqlite\sqlite3.h: $(DEPS_51)

#
#   sqlite.obj
#
DEPS_52 = $(DEPS_52) build\$(CONFIG)\inc\me.h
DEPS_52 = $(DEPS_52) src\sqlite\sqlite3.h
DEPS_52 = $(DEPS_52) build\$(CONFIG)\inc\windows.h

build\$(CONFIG)\obj\sqlite.obj: \
    src\sqlite\sqlite.c $(DEPS_52)
	@echo .. [Compile] build\$(CONFIG)\obj\sqlite.obj
	"$(CC)" -c -Fo$(BUILD)\obj\sqlite.obj -Fd$(BUILD)\obj\sqlite.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sqlite\sqlite.c $(LOG)

#
#   sqlite3.obj
#
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\me.h
DEPS_53 = $(DEPS_53) src\sqlite\sqlite3.h
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\config.h
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\windows.h
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\sqlite3rtree.h

build\$(CONFIG)\obj\sqlite3.obj: \
    src\sqlite\sqlite3.c $(DEPS_53)
	@echo .. [Compile] build\$(CONFIG)\obj\sqlite3.obj
	"$(CC)" -c -Fo$(BUILD)\obj\sqlite3.obj -Fd$(BUILD)\obj\sqlite3.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sqlite\sqlite3.c $(LOG)

#
#   testHandler.obj
#

build\$(CONFIG)\obj\testHandler.obj: \
    src\modules\testHandler.c $(DEPS_54)
	@echo .. [Compile] build\$(CONFIG)\obj\testHandler.obj
	"$(CC)" -c -Fo$(BUILD)\obj\testHandler.obj -Fd$(BUILD)\obj\testHandler.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\modules\testHandler.c $(LOG)

#
#   watchdog.obj
#
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\watchdog.obj: \
    src\watchdog\watchdog.c $(DEPS_55)
	@echo .. [Compile] build\$(CONFIG)\obj\watchdog.obj
	"$(CC)" -c -Fo$(BUILD)\obj\watchdog.obj -Fd$(BUILD)\obj\watchdog.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) -D_FILE_OFFSET_BITS=64 -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\watchdog\watchdog.c $(LOG)

!IF "$(ME_COM_MBEDTLS)" == "1"
#
#   libmbedtls
#
DEPS_56 = $(DEPS_56) build\$(CONFIG)\inc\osdep.h
DEPS_56 = $(DEPS_56) build\$(CONFIG)\inc\embedtls.h
DEPS_56 = $(DEPS_56) build\$(CONFIG)\inc\mbedtls.h
DEPS_56 = $(DEPS_56) build\$(CONFIG)\obj\mbedtls.obj

build\$(CONFIG)\bin\libmbedtls.lib: $(DEPS_56)
	@echo ..... [Link] build\$(CONFIG)\bin\libmbedtls.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmbedtls.lib "$(BUILD)\obj\mbedtls.obj" $(LOG)
!ENDIF

!IF "$(ME_COM_MBEDTLS)" == "1"
#
#   libmpr-mbedtls
#
DEPS_57 = $(DEPS_57) build\$(CONFIG)\bin\libmbedtls.lib
DEPS_57 = $(DEPS_57) build\$(CONFIG)\obj\mpr-mbedtls.obj

build\$(CONFIG)\bin\libmpr-mbedtls.lib: $(DEPS_57)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-mbedtls.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmpr-mbedtls.lib "$(BUILD)\obj\mpr-mbedtls.obj" $(LOG)
!ENDIF

!IF "$(ME_COM_OPENSSL)" == "1"
#
#   libmpr-openssl
#
DEPS_58 = $(DEPS_58) build\$(CONFIG)\obj\mpr-openssl.obj

build\$(CONFIG)\bin\libmpr-openssl.lib: $(DEPS_58)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-openssl.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmpr-openssl.lib "$(BUILD)\obj\mpr-openssl.obj" $(LOG)
!ENDIF

#
#   libmpr
#
DEPS_59 = $(DEPS_59) build\$(CONFIG)\inc\osdep.h
!IF "$(ME_COM_MBEDTLS)" == "1"
DEPS_59 = $(DEPS_59) build\$(CONFIG)\bin\libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
DEPS_59 = $(DEPS_59) build\$(CONFIG)\bin\libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
DEPS_59 = $(DEPS_59) build\$(CONFIG)\bin\libmpr-openssl.lib
!ENDIF
DEPS_59 = $(DEPS_59) build\$(CONFIG)\inc\mpr.h
DEPS_59 = $(DEPS_59) build\$(CONFIG)\obj\mprLib.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) gdi32.lib
LIBPATHS_59 = $(LIBPATHS_59) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) libeay32.lib
LIBPATHS_59 = $(LIBPATHS_59) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) ssleay32.lib
LIBPATHS_59 = $(LIBPATHS_59) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) libmpr-mbedtls.lib
!ENDIF

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_59)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:_DllMainCRTStartup $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\mprLib.obj" $(LIBPATHS_59) $(LIBS_59) $(LIBS)  $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_60 = $(DEPS_60) build\$(CONFIG)\inc\pcre.h
DEPS_60 = $(DEPS_60) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_60)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:_DllMainCRTStartup $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_61 = $(DEPS_61) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_61 = $(DEPS_61) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_61 = $(DEPS_61) build\$(CONFIG)\inc\http.h
DEPS_61 = $(DEPS_61) build\$(CONFIG)\obj\httpLib.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_61 = $(LIBS_61) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_61 = $(LIBS_61) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_61 = $(LIBS_61) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_61 = $(LIBS_61) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_61 = $(LIBS_61) gdi32.lib
LIBPATHS_61 = $(LIBPATHS_61) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_61 = $(LIBS_61) libeay32.lib
LIBPATHS_61 = $(LIBPATHS_61) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_61 = $(LIBS_61) ssleay32.lib
LIBPATHS_61 = $(LIBPATHS_61) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_61 = $(LIBS_61) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_61 = $(LIBS_61) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_61 = $(LIBS_61) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_61 = $(LIBS_61) libpcre.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_61 = $(LIBS_61) libpcre.lib
!ENDIF
LIBS_61 = $(LIBS_61) libmpr.lib

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_61)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:_DllMainCRTStartup $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_61) $(LIBS_61) $(LIBS)  $(LOG)
!ENDIF

#
#   libmpr-version
#
DEPS_62 = $(DEPS_62) build\$(CONFIG)\inc\mpr-version.h
DEPS_62 = $(DEPS_62) build\$(CONFIG)\obj\mpr-version.obj

build\$(CONFIG)\bin\libmpr-version.lib: $(DEPS_62)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-version.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmpr-version.lib "$(BUILD)\obj\mpr-version.obj" $(LOG)

!IF "$(ME_COM_ESP)" == "1"
#
#   libesp
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_63 = $(DEPS_63) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
DEPS_63 = $(DEPS_63) build\$(CONFIG)\bin\libmpr-version.lib
!IF "$(ME_COM_SQLITE)" == "1"
DEPS_63 = $(DEPS_63) build\$(CONFIG)\bin\libsql.dll
!ENDIF
DEPS_63 = $(DEPS_63) build\$(CONFIG)\inc\esp.h
DEPS_63 = $(DEPS_63) build\$(CONFIG)\obj\espLib.obj
!IF "$(ME_COM_SQLITE)" == "1"
DEPS_63 = $(DEPS_63) build\$(CONFIG)\bin\libsql.dll
!ENDIF

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_63 = $(LIBS_63) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_63 = $(LIBS_63) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_63 = $(LIBS_63) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_63 = $(LIBS_63) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_63 = $(LIBS_63) gdi32.lib
LIBPATHS_63 = $(LIBPATHS_63) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_63 = $(LIBS_63) libeay32.lib
LIBPATHS_63 = $(LIBPATHS_63) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_63 = $(LIBS_63) ssleay32.lib
LIBPATHS_63 = $(LIBPATHS_63) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_63 = $(LIBS_63) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_63 = $(LIBS_63) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_63 = $(LIBS_63) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_63 = $(LIBS_63) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_63 = $(LIBS_63) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_63 = $(LIBS_63) libpcre.lib
!ENDIF
LIBS_63 = $(LIBS_63) libmpr.lib
LIBS_63 = $(LIBS_63) libmpr-version.lib
!IF "$(ME_COM_SQLITE)" == "1"
LIBS_63 = $(LIBS_63) libsql.lib
!ENDIF
LIBS_63 = $(LIBS_63) libmpr-version.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_63 = $(LIBS_63) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\libesp.dll: $(DEPS_63)
	@echo ..... [Link] build\$(CONFIG)\bin\libesp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libesp.dll -entry:_DllMainCRTStartup $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\espLib.obj" $(LIBPATHS_63) $(LIBS_63) $(LIBS)  $(LOG)
!ENDIF

#
#   libappweb
#
!IF "$(ME_COM_ESP)" == "1"
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libesp.dll
!ENDIF
!IF "$(ME_COM_SQLITE)" == "1"
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libsql.dll
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libmpr.dll
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libmpr-version.lib
DEPS_64 = $(DEPS_64) build\$(CONFIG)\inc\appweb.h
DEPS_64 = $(DEPS_64) build\$(CONFIG)\inc\customize.h
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\config.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\convenience.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\cgiHandler.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\espHandler.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\fastHandler.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\proxyHandler.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\testHandler.obj
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\rom.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_64 = $(LIBS_64) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_64 = $(LIBS_64) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_64 = $(LIBS_64) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_64 = $(LIBS_64) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_64 = $(LIBS_64) gdi32.lib
LIBPATHS_64 = $(LIBPATHS_64) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_64 = $(LIBS_64) libeay32.lib
LIBPATHS_64 = $(LIBPATHS_64) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_64 = $(LIBS_64) ssleay32.lib
LIBPATHS_64 = $(LIBPATHS_64) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_64 = $(LIBS_64) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_64 = $(LIBS_64) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_64 = $(LIBS_64) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_64 = $(LIBS_64) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_64 = $(LIBS_64) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_64 = $(LIBS_64) libpcre.lib
!ENDIF
LIBS_64 = $(LIBS_64) libmpr.lib
LIBS_64 = $(LIBS_64) libmpr-version.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_64 = $(LIBS_64) libesp.lib
!ENDIF
!IF "$(ME_COM_SQLITE)" == "1"
LIBS_64 = $(LIBS_64) libsql.lib
!ENDIF
LIBS_64 = $(LIBS_64) libmpr-version.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_64 = $(LIBS_64) libhttp.lib
!ENDIF
!IF "$(ME_COM_ESP)" == "1"
LIBS_64 = $(LIBS_64) libesp.lib
!ENDIF

build\$(CONFIG)\bin\libappweb.dll: $(DEPS_64)
	@echo ..... [Link] build\$(CONFIG)\bin\libappweb.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libappweb.dll -entry:_DllMainCRTStartup $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\config.obj" "$(BUILD)\obj\convenience.obj" "$(BUILD)\obj\cgiHandler.obj" "$(BUILD)\obj\espHandler.obj" "$(BUILD)\obj\fastHandler.obj" "$(BUILD)\obj\proxyHandler.obj" "$(BUILD)\obj\testHandler.obj" "$(BUILD)\obj\rom.obj" $(LIBPATHS_64) $(LIBS_64) $(LIBS)  $(LOG)

#
#   appweb
#
DEPS_65 = $(DEPS_65) build\$(CONFIG)\bin\libappweb.dll
DEPS_65 = $(DEPS_65) build\$(CONFIG)\obj\appweb.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_65 = $(LIBS_65) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_65 = $(LIBS_65) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_65 = $(LIBS_65) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_65 = $(LIBS_65) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_65 = $(LIBS_65) gdi32.lib
LIBPATHS_65 = $(LIBPATHS_65) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_65 = $(LIBS_65) libeay32.lib
LIBPATHS_65 = $(LIBPATHS_65) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_65 = $(LIBS_65) ssleay32.lib
LIBPATHS_65 = $(LIBPATHS_65) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_65 = $(LIBS_65) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_65 = $(LIBS_65) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_65 = $(LIBS_65) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_65 = $(LIBS_65) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_65 = $(LIBS_65) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_65 = $(LIBS_65) libpcre.lib
!ENDIF
LIBS_65 = $(LIBS_65) libmpr.lib
LIBS_65 = $(LIBS_65) libmpr-version.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_65 = $(LIBS_65) libesp.lib
!ENDIF
!IF "$(ME_COM_SQLITE)" == "1"
LIBS_65 = $(LIBS_65) libsql.lib
!ENDIF
LIBS_65 = $(LIBS_65) libmpr-version.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_65 = $(LIBS_65) libhttp.lib
!ENDIF
LIBS_65 = $(LIBS_65) libappweb.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_65 = $(LIBS_65) libesp.lib
!ENDIF

build\$(CONFIG)\bin\appweb.exe: $(DEPS_65)
	@echo ..... [Link] build\$(CONFIG)\bin\appweb.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\appweb.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\appweb.obj" $(LIBPATHS_65) $(LIBS_65) $(LIBS)  $(LOG)

#
#   appwebMonitor
#
DEPS_66 = $(DEPS_66) build\$(CONFIG)\bin\libappweb.dll
DEPS_66 = $(DEPS_66) build\$(CONFIG)\inc\appwebMonitor.h
DEPS_66 = $(DEPS_66) build\$(CONFIG)\inc\monitorResources.h
DEPS_66 = $(DEPS_66) build\$(CONFIG)\obj\appwebMonitor.res
DEPS_66 = $(DEPS_66) build\$(CONFIG)\obj\appwebMonitor.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_66 = $(LIBS_66) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_66 = $(LIBS_66) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_66 = $(LIBS_66) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_66 = $(LIBS_66) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_66 = $(LIBS_66) gdi32.lib
LIBPATHS_66 = $(LIBPATHS_66) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_66 = $(LIBS_66) libeay32.lib
LIBPATHS_66 = $(LIBPATHS_66) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_66 = $(LIBS_66) ssleay32.lib
LIBPATHS_66 = $(LIBPATHS_66) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_66 = $(LIBS_66) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_66 = $(LIBS_66) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_66 = $(LIBS_66) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_66 = $(LIBS_66) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_66 = $(LIBS_66) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_66 = $(LIBS_66) libpcre.lib
!ENDIF
LIBS_66 = $(LIBS_66) libmpr.lib
LIBS_66 = $(LIBS_66) libmpr-version.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_66 = $(LIBS_66) libesp.lib
!ENDIF
!IF "$(ME_COM_SQLITE)" == "1"
LIBS_66 = $(LIBS_66) libsql.lib
!ENDIF
LIBS_66 = $(LIBS_66) libmpr-version.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_66 = $(LIBS_66) libhttp.lib
!ENDIF
LIBS_66 = $(LIBS_66) libappweb.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_66 = $(LIBS_66) libesp.lib
!ENDIF

build\$(CONFIG)\bin\appwebMonitor.exe: $(DEPS_66)
	@echo ..... [Link] build\$(CONFIG)\bin\appwebMonitor.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\appwebMonitor.exe -entry:WinMainCRTStartup -subsystem:windows $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\appwebMonitor.res" "$(BUILD)\obj\appwebMonitor.obj" shell32.lib ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib  $(LIBPATHS_66) $(LIBS_66) $(LOG)

#
#   appwebMonitor.ico
#
DEPS_67 = $(DEPS_67) src\server\windows\appwebMonitor.ico

build\$(CONFIG)\bin\appwebMonitor.ico: $(DEPS_67)
	@echo ..... [Copy] build\$(CONFIG)\bin\appwebMonitor.ico
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\server\windows\appwebMonitor.ico+modified build\$(CONFIG)\bin\appwebMonitor.ico $(LOG)

#
#   authpass
#
DEPS_68 = $(DEPS_68) build\$(CONFIG)\bin\libappweb.dll
DEPS_68 = $(DEPS_68) build\$(CONFIG)\obj\authpass.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_68 = $(LIBS_68) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_68 = $(LIBS_68) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_68 = $(LIBS_68) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_68 = $(LIBS_68) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_68 = $(LIBS_68) gdi32.lib
LIBPATHS_68 = $(LIBPATHS_68) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_68 = $(LIBS_68) libeay32.lib
LIBPATHS_68 = $(LIBPATHS_68) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_68 = $(LIBS_68) ssleay32.lib
LIBPATHS_68 = $(LIBPATHS_68) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_68 = $(LIBS_68) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_68 = $(LIBS_68) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_68 = $(LIBS_68) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_68 = $(LIBS_68) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_68 = $(LIBS_68) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_68 = $(LIBS_68) libpcre.lib
!ENDIF
LIBS_68 = $(LIBS_68) libmpr.lib
LIBS_68 = $(LIBS_68) libmpr-version.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_68 = $(LIBS_68) libesp.lib
!ENDIF
!IF "$(ME_COM_SQLITE)" == "1"
LIBS_68 = $(LIBS_68) libsql.lib
!ENDIF
LIBS_68 = $(LIBS_68) libmpr-version.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_68 = $(LIBS_68) libhttp.lib
!ENDIF
LIBS_68 = $(LIBS_68) libappweb.lib
!IF "$(ME_COM_ESP)" == "1"
LIBS_68 = $(LIBS_68) libesp.lib
!ENDIF

build\$(CONFIG)\bin\authpass.exe: $(DEPS_68)
	@echo ..... [Link] build\$(CONFIG)\bin\authpass.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\authpass.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\authpass.obj" $(LIBPATHS_68) $(LIBS_68) $(LIBS)  $(LOG)

!IF "$(ME_COM_ESP)" == "1"
#
#   espcmd
#
DEPS_69 = $(DEPS_69) build\$(CONFIG)\bin\libesp.dll
!IF "$(ME_COM_SQLITE)" == "1"
DEPS_69 = $(DEPS_69) build\$(CONFIG)\bin\libsql.dll
!ENDIF
DEPS_69 = $(DEPS_69) build\$(CONFIG)\obj\esp.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_69 = $(LIBS_69) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_69 = $(LIBS_69) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_69 = $(LIBS_69) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_69 = $(LIBS_69) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_69 = $(LIBS_69) gdi32.lib
LIBPATHS_69 = $(LIBPATHS_69) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_69 = $(LIBS_69) libeay32.lib
LIBPATHS_69 = $(LIBPATHS_69) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_69 = $(LIBS_69) ssleay32.lib
LIBPATHS_69 = $(LIBPATHS_69) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_69 = $(LIBS_69) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_69 = $(LIBS_69) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_69 = $(LIBS_69) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_69 = $(LIBS_69) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_69 = $(LIBS_69) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_69 = $(LIBS_69) libpcre.lib
!ENDIF
LIBS_69 = $(LIBS_69) libmpr.lib
LIBS_69 = $(LIBS_69) libmpr-version.lib
LIBS_69 = $(LIBS_69) libesp.lib
!IF "$(ME_COM_SQLITE)" == "1"
LIBS_69 = $(LIBS_69) libsql.lib
!ENDIF
LIBS_69 = $(LIBS_69) libmpr-version.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_69 = $(LIBS_69) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\appweb-esp.exe: $(DEPS_69)
	@echo ..... [Link] build\$(CONFIG)\bin\appweb-esp.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\appweb-esp.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\esp.obj" $(LIBPATHS_69) $(LIBS_69) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_ESP)" == "1"
#
#   extras
#
DEPS_70 = $(DEPS_70) src\esp\esp-compile.json
DEPS_70 = $(DEPS_70) src\esp\vcvars.bat

build\$(CONFIG)\.extras-modified: $(DEPS_70)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\esp\esp-compile.json+modified build\$(CONFIG)\bin\esp-compile.json $(LOG)
	copy /Y /B src\esp\vcvars.bat+modified build\$(CONFIG)\bin\vcvars.bat $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.extras-modified $(LOG)
!ENDIF

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_71 = $(DEPS_71) build\$(CONFIG)\bin\libhttp.dll
DEPS_71 = $(DEPS_71) build\$(CONFIG)\obj\http.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_71 = $(LIBS_71) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_71 = $(LIBS_71) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_71 = $(LIBS_71) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_71 = $(LIBS_71) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_71 = $(LIBS_71) gdi32.lib
LIBPATHS_71 = $(LIBPATHS_71) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_71 = $(LIBS_71) libeay32.lib
LIBPATHS_71 = $(LIBPATHS_71) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_71 = $(LIBS_71) ssleay32.lib
LIBPATHS_71 = $(LIBPATHS_71) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_71 = $(LIBS_71) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_71 = $(LIBS_71) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_71 = $(LIBS_71) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_71 = $(LIBS_71) libpcre.lib
!ENDIF
LIBS_71 = $(LIBS_71) libhttp.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_71 = $(LIBS_71) libpcre.lib
!ENDIF
LIBS_71 = $(LIBS_71) libmpr.lib

build\$(CONFIG)\bin\http.exe: $(DEPS_71)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\http.obj" $(LIBPATHS_71) $(LIBS_71) $(LIBS)  $(LOG)
!ENDIF

#
#   installPrep
#

installPrep: $(DEPS_72)
	if [ "`id -u`" != 0 ]
	then echo "Must run as root. Rerun with sudo."
	exit 255
	fi

#
#   install-certs
#
DEPS_73 = $(DEPS_73) src\certs\samples\ca.crt
DEPS_73 = $(DEPS_73) src\certs\samples\ca.key
DEPS_73 = $(DEPS_73) src\certs\samples\ec.crt
DEPS_73 = $(DEPS_73) src\certs\samples\ec.key
DEPS_73 = $(DEPS_73) src\certs\samples\roots.crt
DEPS_73 = $(DEPS_73) src\certs\samples\self.crt
DEPS_73 = $(DEPS_73) src\certs\samples\self.key
DEPS_73 = $(DEPS_73) src\certs\samples\test.crt
DEPS_73 = $(DEPS_73) src\certs\samples\test.key

build\$(CONFIG)\.install-certs-modified: $(DEPS_73)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\certs\samples\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)
	copy /Y /B src\certs\samples\ca.key+modified build\$(CONFIG)\bin\ca.key $(LOG)
	copy /Y /B src\certs\samples\ec.crt+modified build\$(CONFIG)\bin\ec.crt $(LOG)
	copy /Y /B src\certs\samples\ec.key+modified build\$(CONFIG)\bin\ec.key $(LOG)
	copy /Y /B src\certs\samples\roots.crt+modified build\$(CONFIG)\bin\roots.crt $(LOG)
	copy /Y /B src\certs\samples\self.crt+modified build\$(CONFIG)\bin\self.crt $(LOG)
	copy /Y /B src\certs\samples\self.key+modified build\$(CONFIG)\bin\self.key $(LOG)
	copy /Y /B src\certs\samples\test.crt+modified build\$(CONFIG)\bin\test.crt $(LOG)
	copy /Y /B src\certs\samples\test.key+modified build\$(CONFIG)\bin\test.key $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.install-certs-modified $(LOG)

!IF "$(ME_COM_SQLITE)" == "1"
#
#   libsql
#
DEPS_74 = $(DEPS_74) build\$(CONFIG)\inc\sqlite3.h
DEPS_74 = $(DEPS_74) build\$(CONFIG)\obj\sqlite3.obj

build\$(CONFIG)\bin\libsql.dll: $(DEPS_74)
	@echo ..... [Link] build\$(CONFIG)\bin\libsql.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libsql.dll -entry:_DllMainCRTStartup $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\sqlite3.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   makerom
#
DEPS_75 = $(DEPS_75) build\$(CONFIG)\bin\libmpr.dll
DEPS_75 = $(DEPS_75) build\$(CONFIG)\obj\makerom.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_75 = $(LIBS_75) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_75 = $(LIBS_75) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_75 = $(LIBS_75) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_75 = $(LIBS_75) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_75 = $(LIBS_75) gdi32.lib
LIBPATHS_75 = $(LIBPATHS_75) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_75 = $(LIBS_75) libeay32.lib
LIBPATHS_75 = $(LIBPATHS_75) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_75 = $(LIBS_75) ssleay32.lib
LIBPATHS_75 = $(LIBPATHS_75) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_75 = $(LIBS_75) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_75 = $(LIBS_75) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_75 = $(LIBS_75) libmpr-mbedtls.lib
!ENDIF

build\$(CONFIG)\bin\makerom.exe: $(DEPS_75)
	@echo ..... [Link] build\$(CONFIG)\bin\makerom.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\makerom.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\makerom.obj" $(LIBPATHS_75) $(LIBS_75) $(LIBS)  $(LOG)

#
#   server
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_76 = $(DEPS_76) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
DEPS_76 = $(DEPS_76) build\$(CONFIG)\obj\server.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_76 = $(LIBS_76) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_76 = $(LIBS_76) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_76 = $(LIBS_76) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_76 = $(LIBS_76) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_76 = $(LIBS_76) gdi32.lib
LIBPATHS_76 = $(LIBPATHS_76) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_76 = $(LIBS_76) libeay32.lib
LIBPATHS_76 = $(LIBPATHS_76) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_76 = $(LIBS_76) ssleay32.lib
LIBPATHS_76 = $(LIBPATHS_76) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_76 = $(LIBS_76) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_76 = $(LIBS_76) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_76 = $(LIBS_76) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_76 = $(LIBS_76) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_76 = $(LIBS_76) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_76 = $(LIBS_76) libpcre.lib
!ENDIF
LIBS_76 = $(LIBS_76) libmpr.lib

build\$(CONFIG)\bin\server.exe: $(DEPS_76)
	@echo ..... [Link] build\$(CONFIG)\bin\server.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\server.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\server.obj" $(LIBPATHS_76) $(LIBS_76) $(LIBS)  $(LOG)

#
#   server-cache
#

src\server\cache: $(DEPS_77)
	cd src\server
	if not exist "cache" md "cache"
	cd ..\..

!IF "$(ME_COM_WATCHDOG)" == "1"
#
#   watchdog
#
DEPS_78 = $(DEPS_78) build\$(CONFIG)\bin\libmpr.dll
DEPS_78 = $(DEPS_78) build\$(CONFIG)\obj\watchdog.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_78 = $(LIBS_78) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_78 = $(LIBS_78) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_78 = $(LIBS_78) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_78 = $(LIBS_78) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_78 = $(LIBS_78) gdi32.lib
LIBPATHS_78 = $(LIBPATHS_78) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_78 = $(LIBS_78) libeay32.lib
LIBPATHS_78 = $(LIBPATHS_78) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_78 = $(LIBS_78) ssleay32.lib
LIBPATHS_78 = $(LIBPATHS_78) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
LIBS_78 = $(LIBS_78) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_78 = $(LIBS_78) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_78 = $(LIBS_78) libmpr-mbedtls.lib
!ENDIF

build\$(CONFIG)\bin\appman.exe: $(DEPS_78)
	@echo ..... [Link] build\$(CONFIG)\bin\appman.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\appman.exe -entry:WinMainCRTStartup -subsystem:windows $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\watchdog.obj" $(LIBPATHS_78) $(LIBS_78) $(LIBS)  $(LOG)
!ENDIF

#
#   stop
#
DEPS_79 = $(DEPS_79) compile

stop: $(DEPS_79)
	@./$(BUILD)/bin/appman stop disable uninstall >/dev/null 2>&1 ; true

#
#   installBinary
#

installBinary: $(DEPS_80)
	if not exist "$(ME_VAPP_PREFIX)\man\man1" md "$(ME_VAPP_PREFIX)\man\man1"
	if not exist "$(ME_VAPP_PREFIX)\log" md "$(ME_VAPP_PREFIX)\log"
	if not exist "$(ME_VAPP_PREFIX)\cache" md "$(ME_VAPP_PREFIX)\cache"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\appweb.exe+modified "$(ME_VAPP_PREFIX)\bin\appweb.exe" $(LOG)
!IF "$(ME_COM_SSL)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\roots.crt+modified "$(ME_VAPP_PREFIX)\bin\roots.crt" $(LOG)
!ENDIF
	if not exist "$(ME_VAPP_PREFIX)" md "$(ME_VAPP_PREFIX)"
	copy /Y /B src\server\mime.types+modified "$(ME_VAPP_PREFIX)\mime.types" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)" md "$(ME_VAPP_PREFIX)"
	copy /Y /B src\server\appweb.conf+modified "$(ME_VAPP_PREFIX)\appweb.conf" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)" md "$(ME_VAPP_PREFIX)"
	copy /Y /B src\server\esp.json+modified "$(ME_VAPP_PREFIX)\esp.json" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)" md "$(ME_VAPP_PREFIX)"
	copy /Y /B src\server\sample.conf+modified "$(ME_VAPP_PREFIX)\sample.conf" $(LOG)
	echo 'set LOG_DIR "$(ME_VAPP_PREFIX)/log"\nset CACHE_DIR "$(ME_VAPP_PREFIX)/cache"\nDocuments "$(ME_VAPP_PREFIX)/web"\nListen 80\n<if SSL_MODULE>\nListenSecure 443\n</if>\n' >$(ME_VAPP_PREFIX)/install.conf
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\libappweb.dll+modified "$(ME_VAPP_PREFIX)\bin\libappweb.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libesp.dll+modified "$(ME_VAPP_PREFIX)\bin\libesp.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libhttp.dll+modified "$(ME_VAPP_PREFIX)\bin\libhttp.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libmpr.dll+modified "$(ME_VAPP_PREFIX)\bin\libmpr.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libpcre.dll+modified "$(ME_VAPP_PREFIX)\bin\libpcre.dll" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\libappweb.lib+modified "$(ME_VAPP_PREFIX)\bin\libappweb.lib" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libesp.lib+modified "$(ME_VAPP_PREFIX)\bin\libesp.lib" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libpcre.lib+modified "$(ME_VAPP_PREFIX)\bin\libpcre.lib" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libhttp.lib+modified "$(ME_VAPP_PREFIX)\bin\libhttp.lib" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libmpr.lib+modified "$(ME_VAPP_PREFIX)\bin\libmpr.lib" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\web" md "$(ME_VAPP_PREFIX)\web"
	copy /Y /B src\server\web\100K.txt+modified "$(ME_VAPP_PREFIX)\web\100K.txt" $(LOG)
	copy /Y /B src\server\web\10K.txt+modified "$(ME_VAPP_PREFIX)\web\10K.txt" $(LOG)
	copy /Y /B src\server\web\1K.txt+modified "$(ME_VAPP_PREFIX)\web\1K.txt" $(LOG)
	copy /Y /B src\server\web\1M.txt+modified "$(ME_VAPP_PREFIX)\web\1M.txt" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\web\bench" md "$(ME_VAPP_PREFIX)\web\bench"
	copy /Y /B src\server\web\bench\1b.html+modified "$(ME_VAPP_PREFIX)\web\bench\1b.html" $(LOG)
	copy /Y /B src\server\web\bench\4k.html+modified "$(ME_VAPP_PREFIX)\web\bench\4k.html" $(LOG)
	copy /Y /B src\server\web\bench\64k.html+modified "$(ME_VAPP_PREFIX)\web\bench\64k.html" $(LOG)
	copy /Y /B src\server\web\favicon.ico+modified "$(ME_VAPP_PREFIX)\web\favicon.ico" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\web\icons" md "$(ME_VAPP_PREFIX)\web\icons"
	copy /Y /B src\server\web\icons\back.gif+modified "$(ME_VAPP_PREFIX)\web\icons\back.gif" $(LOG)
	copy /Y /B src\server\web\icons\blank.gif+modified "$(ME_VAPP_PREFIX)\web\icons\blank.gif" $(LOG)
	copy /Y /B src\server\web\icons\compressed.gif+modified "$(ME_VAPP_PREFIX)\web\icons\compressed.gif" $(LOG)
	copy /Y /B src\server\web\icons\folder.gif+modified "$(ME_VAPP_PREFIX)\web\icons\folder.gif" $(LOG)
	copy /Y /B src\server\web\icons\parent.gif+modified "$(ME_VAPP_PREFIX)\web\icons\parent.gif" $(LOG)
	copy /Y /B src\server\web\icons\space.gif+modified "$(ME_VAPP_PREFIX)\web\icons\space.gif" $(LOG)
	copy /Y /B src\server\web\icons\text.gif+modified "$(ME_VAPP_PREFIX)\web\icons\text.gif" $(LOG)
	copy /Y /B src\server\web\iehacks.css+modified "$(ME_VAPP_PREFIX)\web\iehacks.css" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\web\images" md "$(ME_VAPP_PREFIX)\web\images"
	copy /Y /B src\server\web\images\banner.jpg+modified "$(ME_VAPP_PREFIX)\web\images\banner.jpg" $(LOG)
	copy /Y /B src\server\web\images\bottomShadow.jpg+modified "$(ME_VAPP_PREFIX)\web\images\bottomShadow.jpg" $(LOG)
	copy /Y /B src\server\web\images\shadow.jpg+modified "$(ME_VAPP_PREFIX)\web\images\shadow.jpg" $(LOG)
	copy /Y /B src\server\web\index.html+modified "$(ME_VAPP_PREFIX)\web\index.html" $(LOG)
	copy /Y /B src\server\web\min-index.html+modified "$(ME_VAPP_PREFIX)\web\min-index.html" $(LOG)
	copy /Y /B src\server\web\print.css+modified "$(ME_VAPP_PREFIX)\web\print.css" $(LOG)
	copy /Y /B src\server\web\screen.css+modified "$(ME_VAPP_PREFIX)\web\screen.css" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\web\test" md "$(ME_VAPP_PREFIX)\web\test"
	copy /Y /B src\server\web\test\bench.html+modified "$(ME_VAPP_PREFIX)\web\test\bench.html" $(LOG)
	copy /Y /B src\server\web\test\index.html+modified "$(ME_VAPP_PREFIX)\web\test\index.html" $(LOG)
	copy /Y /B src\server\web\test\test.cgi+modified "$(ME_VAPP_PREFIX)\web\test\test.cgi" $(LOG)
	copy /Y /B src\server\web\test\test.esp+modified "$(ME_VAPP_PREFIX)\web\test\test.esp" $(LOG)
	copy /Y /B src\server\web\test\test.html+modified "$(ME_VAPP_PREFIX)\web\test\test.html" $(LOG)
	copy /Y /B src\server\web\test\test.pl+modified "$(ME_VAPP_PREFIX)\web\test\test.pl" $(LOG)
	copy /Y /B src\server\web\test\test.py+modified "$(ME_VAPP_PREFIX)\web\test\test.py" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\web\test" md "$(ME_VAPP_PREFIX)\web\test"
	copy /Y /B src\server\web\test\test.cgi+modified "$(ME_VAPP_PREFIX)\web\test\test.cgi" $(LOG)
	copy /Y /B src\server\web\test\test.pl+modified "$(ME_VAPP_PREFIX)\web\test\test.pl" $(LOG)
	copy /Y /B src\server\web\test\test.py+modified "$(ME_VAPP_PREFIX)\web\test\test.py" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\appman.exe+modified "$(ME_VAPP_PREFIX)\bin\appman.exe" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\appwebMonitor.exe+modified "$(ME_VAPP_PREFIX)\bin\appwebMonitor.exe" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\appwebMonitor.ico+modified "$(ME_VAPP_PREFIX)\bin\appwebMonitor.ico" $(LOG)
!IF "$(ME_COM_ESP)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\appweb-esp.exe+modified "$(ME_VAPP_PREFIX)\bin\appesp.exe" $(LOG)
!ENDIF
!IF "$(ME_COM_ESP)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\appweb-esp.exe+modified "$(ME_VAPP_PREFIX)\bin\appweb-esp.exe" $(LOG)
!ENDIF
!IF "$(ME_COM_ESP)" == "1"
!ENDIF
!IF "$(ME_COM_ESP)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\esp-compile.json+modified "$(ME_VAPP_PREFIX)\bin\esp-compile.json" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\vcvars.bat+modified "$(ME_VAPP_PREFIX)\bin\vcvars.bat" $(LOG)
!ENDIF
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\http.exe+modified "$(ME_VAPP_PREFIX)\bin\http.exe" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\inc" md "$(ME_VAPP_PREFIX)\inc"
	copy /Y /B build\$(CONFIG)\inc\me.h+modified "$(ME_VAPP_PREFIX)\inc\me.h" $(LOG)
	copy /Y /B src\osdep\osdep.h+modified "$(ME_VAPP_PREFIX)\inc\osdep.h" $(LOG)
	copy /Y /B src\appweb.h+modified "$(ME_VAPP_PREFIX)\inc\appweb.h" $(LOG)
	copy /Y /B src\customize.h+modified "$(ME_VAPP_PREFIX)\inc\customize.h" $(LOG)
	copy /Y /B src\http\http.h+modified "$(ME_VAPP_PREFIX)\inc\http.h" $(LOG)
	copy /Y /B src\mpr\mpr.h+modified "$(ME_VAPP_PREFIX)\inc\mpr.h" $(LOG)
	copy /Y /B src\pcre\pcre.h+modified "$(ME_VAPP_PREFIX)\inc\pcre.h" $(LOG)
!IF "$(ME_COM_ESP)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\inc" md "$(ME_VAPP_PREFIX)\inc"
	copy /Y /B src\esp\esp.h+modified "$(ME_VAPP_PREFIX)\inc\esp.h" $(LOG)
!ENDIF

#
#   start
#
DEPS_81 = $(DEPS_81) compile
DEPS_81 = $(DEPS_81) stop

start: $(DEPS_81)
	./$(BUILD)/bin/appman install enable start

#
#   install
#
DEPS_82 = $(DEPS_82) installPrep
DEPS_82 = $(DEPS_82) compile
DEPS_82 = $(DEPS_82) stop
DEPS_82 = $(DEPS_82) installBinary
DEPS_82 = $(DEPS_82) start

install: $(DEPS_82)
#  Omit build script install

#
#   run
#
DEPS_83 = $(DEPS_83) compile

run: $(DEPS_83)
	cd src\server
	..\..\build\$(CONFIG)\bin\appweb --log stdout:2
	cd ..\..

#
#   uninstall
#
DEPS_84 = $(DEPS_84) stop

uninstall: $(DEPS_84)
	cd installs
	if exist "$(ME_VAPP_PREFIX)\appweb.conf" del /Q "$(ME_VAPP_PREFIX)\appweb.conf"
	if exist "$(ME_VAPP_PREFIX)\esp.conf" del /Q "$(ME_VAPP_PREFIX)\esp.conf"
	if exist "$(ME_VAPP_PREFIX)\mine.types" del /Q "$(ME_VAPP_PREFIX)\mine.types"
	if exist "$(ME_VAPP_PREFIX)\install.conf" del /Q "$(ME_VAPP_PREFIX)\install.conf"
	if exist "$(ME_VAPP_PREFIX)\inc\appweb" rd /Q /S "$(ME_VAPP_PREFIX)\inc\appweb"
	cd ..

#
#   uninstallBinary
#

uninstallBinary: $(DEPS_85)
	if exist "$(ME_VAPP_PREFIX)\web" rd /Q /S "$(ME_VAPP_PREFIX)\web"
	if exist "$(ME_VAPP_PREFIX)\tmp" rd /Q /S "$(ME_VAPP_PREFIX)\tmp"
	if exist "$(ME_VAPP_PREFIX)\cache" rd /Q /S "$(ME_VAPP_PREFIX)\cache"
	if exist "$(ME_VAPP_PREFIX)\log" rd /Q /S "$(ME_VAPP_PREFIX)\log"
	if exist "$(ME_VAPP_PREFIX)" rd /Q /S "$(ME_VAPP_PREFIX)"
	if exist "$(ME_VAPP_PREFIX)\bin" rd /Q "$(ME_VAPP_PREFIX)\bin"
	if exist "$(ME_VAPP_PREFIX)\inc" rd /Q "$(ME_VAPP_PREFIX)\inc"
	if exist "$(ME_VAPP_PREFIX)\man" rd /Q "$(ME_VAPP_PREFIX)\man"
	if exist "$(ME_VAPP_PREFIX)" rd /Q "$(ME_VAPP_PREFIX)"
	if exist "$(ME_VAPP_PREFIX)\web" rd /Q "$(ME_VAPP_PREFIX)\web"
	if exist "$(ME_VAPP_PREFIX)\log" rd /Q "$(ME_VAPP_PREFIX)\log"
	if exist "$(ME_VAPP_PREFIX)\tmp" rd /Q "$(ME_VAPP_PREFIX)\tmp"
	if exist "$(ME_VAPP_PREFIX)\cache" rd /Q "$(ME_VAPP_PREFIX)\cache"
	if exist "$(ME_VAPP_PREFIX)" rd /Q "$(ME_VAPP_PREFIX)"

#
#   version
#

version: $(DEPS_86)
	echo $(VERSION)

