///
///	@file 	http.dox
/// @brief 	Doxygen documentation for http.h
///
////////////////////////////////////////////////////////////////////////////////
//
//	Copyright (c) Embedthis Software LLC, 2003-2009. All Rights Reserved.
//	The latest version of this code is available at http://www.mbedthis.com
//
//	This software is open source; you can redistribute it and/or modify it 
//	under the terms of the GNU General Public License as published by the 
//	Free Software Foundation; either version 2 of the License, or (at your 
//	option) any later version.
//
//	This program is distributed WITHOUT ANY WARRANTY; without even the 
//	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
//	See the GNU General Public License for more details at:
//	http://www.mbedthis.com/downloads/gplLicense.html
//	
//	This General Public License does NOT permit incorporating this software 
//	into proprietary programs. If you are unable to comply with the GPL, a 
//	commercial license for this software and support services are available
//	from Embedthis Software at http://www.mbedthis.com
//
////////////////////////////////////////////////////////////////////////////////

///	@class MaLimits
///	@brief Request resource usage limits
///
///	This class defines the maximum limits for a request. It is part of an
///	execution sand-box, within which the request must run. 
///	@stability Evolving.

////////////////////////////////////////////////////////////////////////////////

///	@class MaHttp
///	@brief Top level Http application class.
///
///	There is one instance of the Http class per application. It holds a list
///	of HTTP servers running inside the application.
///	@stability Evolving.


///	@fn MaHttp::MaHttp();
///	@synopsis Constructor to create the MaHttp object
///	@overview A MaHttp object is required to use most of the Appweb 
///		services. It contains a list of the servers and provides control
///		over the applictions use of the HTTP service.
/// @stability Evolving.
/// @library libappweb
///	@see MaHttp, MaServer, Mpr


///	@fn int MaHttp::start();
///	@synopsis Activate HTTP servers.
///	@synopsis Start all the logical servers corresponding to the supplied 
///		MaHttp object. Once stared, the default server an any virtual 
///		servers will be activated and begin responding to HTTP requests.
///	@returns Zero if successful, otherwise a MPR error code is returned.
/// @stability Evolving.
/// @library libappweb
///	@see stop


///	@fn int MaHttp::stop();
///	@synopsis Deactivate HTTP servers
///	@overview Stop all the logical servers corresponding to the supplied
///		MaHttp object. The servers will cease serving new requests 
///		immediately. Existing requests will continue to be processed 
///		by the handlers. 
/// @stability Evolving.
/// @library libappweb
///	@see start

/////////////////////////////////// MaServer ///////////////////////////////////

///	@class MaServer
///	@brief HTTP server possibly listening on multiple ports.
///
///	An application may have any number of HTTP servers, each managed
///	by an instance of the Server class. Typically there will be only one 
///	server in an application. There may be multiple virtual hosts and one 
///	default host for each server class. A server will typically be configured 
///	by calling the configure method for each server which parses a file to 
///	define the server and virtual host configuration.
///	@stability Evolving.


///	@fn MaServer::MaServer(MaHttp* hs, char *name, char *root,
///		char *ipAddr = 0, int port = 0);
///	@synopsis Constructor to create a HTTP server.
///	@overview Creates a logical HTTP server that may consist of multiple 
///		virtual servers. 
///	@param hs Pointer to the MaHttp object created by maCreateHttp.
///	@param name Descriptive name to give to the server.
///	@param root Top level path of the directory containing the server.
///	@param ipAddr IP address to listen to 
///	@param port Port number to listen to 
/// @stability Evolving.
/// @library libappweb
///	@see ~MaServer, configure


///	@fn int MaServer::configure(char *configFile);
///	@synopsis configure the entire server from a configuration file.
///	@overview Servers are configured via an Apache-style configuration file.
///		A server may listen on multiple ports and may contain multiple 
///		virtual hosts.
///	@param configFile Path of the configuration file.
///	@return Returns zero if successful, otherwise a negative MPR error code.
///	@options Requires BLD_FEATURE_CONFIG_PARSE.


///	@fn int MaServer::getLine();
///	@synopsis Return the current configuration file line number 
///	@overview If a error is encountered when parsing the configuration file,
///		getLine will return the current line number for error
///		reporting purposes.
///	@returns The current line number (origin 1).
/// @stability Evolving.
/// @library libappweb
///	@see configure


///	@fn int MaServer::loadModule(char *name, char *libname = 0);
///	@synopsis Load an Appweb module
///	@overview This routine loads the given module.
///		the designated the Appweb configuration file.
///	@param name The module name is the pure module prefix. Eg. "cgi". 
///	@param libname The libname should not include an extension. Eg. 
///		"libcgiModule".
///	@returns Returns zero if successful
/// @stability Evolving.
/// @library libappweb
///	@see addHandler


///	@fn MaHost *MaServer::newHost(char *docRoot, char *ipSpec = 0);
/// @synopsis Create a new host
///	@overview Create a new host for this server
///	@param docRoot Directory containing web content to be served
///	@param ipSpec IP:PORT address to use as a ServerName for redirections
///	@returns Returns zero if successful
/// @stability Evolving.
/// @library libappweb
///	@see configure


///	@fn int MaServer::saveConfig(char *configFile);
///	@synopsis Save the current configuration to the named file
///	@overview This routine will save the run-time configuration to 
///		the designated the Appweb configuration file.
///	@param configFile Name of the file to save to
///	@returns Returns zero if successful
/// @stability Evolving.
/// @library libappweb
///	@options Requires BLD_FEATURE_CONFIG_SAVE.
///	@see configure


///	@fn int MaServer::start();
///	@synopsis Start the server.
///	@overview Call to start all hosts within the server.
///	@return Returns zero if successful, otherwise return a negative MPR
///		error code.


///	@fn int MaServer::stop();
///	@synopsis Stop the server.
///	@overview Call to stop all hosts within the server.
///	@return Returns zero if successful, otherwise return a negative MPR
///		error code.


//////////////////////////////////// MaAuth ////////////////////////////////////

///	@class MaAuth
///	@brief Authorization Class
///
///	The MaAuth class is the foundation authorization class and is used as
///	base class by MaDirectory and MaLocation. It stores the authorization
/// configuration information required to determine if a client request
///	should be permitted to the resource controlled by this object. 
/// @stability Evolving.


///	@fn int MaAuth::addGroup(char *group, MaAcl acl, bool enable);
///	@synopsis Add an authorization group.
///	@overview Add an authorization group to the MaAuth object.
///	@param group Name of the authorization group.
///	@param acl Access control list mask.
///	@param enable If TRUE, enable the group.
///	@return Returns zero if successful, otherwise a negative MPR error code.


///	@fn int MaAuth::addUsersToGroup(char *group, char *users);
///	@synopsis Add users to an authorization group.
///	@overview Add a list of users to to the specified authorization group.
///	@param group Name of the authorization group.
///	@param users List of users. User names are separated by white-space.
///	@return Returns zero if successful, otherwise a negative MPR error code.


///	@fn int MaAuth::addUser(char *user, char *realm, char *passwd, bool enable);
///	@synopsis Add an authorization user.
///	@overview Add an authorization user to the MaAuth object. The user + 
///		realm pair must be unique. Multiple user records with differing 
///		realms are allowed.
///	@param user Name of the user to add.
///	@param realm Name of the authorization realm.
///	@param passwd Encrypted user password.
///	@param enable If set to TRUE, the user+realm combination will be 
///		enabled.
///	@return Returns zero if successful, otherwise a negative MPR error code.


///	@fn int MaAuth::disableGroup(char *group);
///	@synopsis Disable a group.
///	@overview Disable an authorization group.
///	@param group Name of the authorization group.
///	@return Returns zero if successful, otherwise a negative MPR error code.


///	@fn int MaAuth::disableUser(char *user, char *realm);
///	@synopsis Disable a user.
///	@overview Disable an authorization user. User + Realm pairs are the
//		unique key.
///	@param user Name of the user to add.
///	@param realm Name of the authorization realm.
///	@return Returns zero if successful, otherwise a negative MPR error code.

///	@fn int MaAuth::enableGroup(char *group);
///	@synopsis Enable a group.
///	@overview Enable an authorization group.
///	@param group Name of the authorization group.
///	@return Returns zero if successful, otherwise a negative MPR error code.


/// @fn int MaAuth::enableUser(char *user, char *realm);
///	@synopsis Enable a user.
///	@overview Enable an authorization user. User + realm pairs are the 
///		unique key.
///	@param user Name of the authorization user.
///	@param realm Name of the authorization realm.
///	@return Returns zero if successful, otherwise a negative MPR error code.


/// @fn MaAcl MaAuth::getRequiredAcl();
///	@synopsis Get an ACL mask
///	@overview Get an Access Control List mask for this auth object.
///	@return Returns the MaAcl mask.


/// @fn MaAcl MaAuth::getGroupAcl(char *group);
///	@synopsis Get an ACL mask for a group
///	@overview Get an Access Control List mask for a group.
///	@param group Name of the authorization group.
///	@return Returns the MaAcl mask.


///	@fn void MaAuth::getGroups(MprStringList *list);
///	@synopsis Get a list of the groups.
///	@overview Get a list of the authorization groups defined for this
///		MaAuth object.
///	@param list String list object to which the group names will be added. 


///	@fn void MaAuth::getUsers(MprStringList *list);
///	@synopsis Get a list of the users.
///	@overview Get a list of the authorization users defined for this
///		MaAuth object.
///	@param list String list object to which the users names will be added. 


///	@fn bool MaAuth::isGroupEnabled(char *group);
///	@synopsis Test if a group is enabled 
///	@overview Return TRUE if the specified group is enabled.
///	@param group Name of the authorization group.
///	@return Returns TRUE if the group is enabled, otherwise FALSE.


///	@fn bool MaAuth::isUserEnabled(char *user, char *realm);
///	@synopsis Test if a user is enabled 
///	@overview Return TRUE if the specified user + realm combination 
///		is enabled.
///	@param user Name of the authorization user.
///	@param realm Name of the authorization realm.
///	@return Returns TRUE if the user is enabled, otherwise FALSE.


///	@fn MaAcl MaAuth::parseAcl(char *aclStr);
///	@synopsis Parse an ACL.
///	@overview Parse an ACL string into an ACL mask.
///	@param aclStr Hex digit string representing the ACL mask.
///	@return Returns the ACL.


///	@fn int MaAuth::removeGroup(char *group);
///	@synopsis Remove a group.
///	@overview Remove a group from the authorization configuration.
///	@param group Name of the authorization group.
///	@return Returns zero if successful, otherwise a negative MPR error code.


///	@fn int MaAuth::removeUser(char *user, char *realm);
///	@synopsis Remove a user.
///	@overview Remove a user from the authorization configuration.
///	@param user Name of the authorization user.
///	@param realm Name of the authorization realm.
///	@return Returns zero if successful, otherwise a negative MPR error code.


/// @fn int MaAuth::removeUsersFromGroup(char *group, char *users);
///	@synopsis Remove users from an authorization group.
///	@overview Remove a set of users from the defined set of user members
///		of a group.
///	@param group Name of the authorization group.
///	@param users List of users. User names are separated by white-space.
///	@return Returns zero if successful, otherwise a negative MPR error code.


///	@fn void MaAuth::reset();
///	@synopsis Reset the authorization object.
///	@overview Reset the authorization object and discard all user and
///		group authorization records.


///	@fn int MaAuth::setGroupAcl(char *group, MaAcl acl);
///	@synopsis Set the ACL mask.
///	@overview Set the Access Control List mask for an authorization group.
///	@param group Name of the authorization group.
///	@param acl Access control list mask.
///	@return Returns zero if successful, otherwise a negative MPR error code.


/////////////////////////////////// MaSession //////////////////////////////////

/// @class MaSession
///	@brief Session data store to store user's state data.
///
///	The MaSession class provides persistent data storage for user's state data
///	accross multiple requests. The MaSession is a subclass of the MprHashEntry
///	class which allows MaSession instances to be stored in a MprHashTable for
///	quick access by their session ID values.
///	@stability Evolving.


/// @fn MaSession::MaSession(MaHost *host, char *sessionId, int timeout);
///	@synopsis Construct a new session data store.
///	@overview Sessions are created and associated with a serving host.
///		The constructor is supplied a unique session ID that will be
///		used as the key for the hash entry for the Session object. 
///	@param host Pointer to the host object owning the session.
///	@param sessionId Pointer to a unique character string session
///		identifier.
///	@param timeout Timeout for the session in seconds. If after the timeout
///		has expired and no session activity has occurred, the sesion will
///		be disposed.
///	@stability Evolving.


/// @fn char *MaSession::getId();
///	@synopsis Return the Session ID 
///	@overview Return the session ID associated with this session. Session
///		IDs are strings that are unique in the server responding to the
///		request.
///	@return Returns a pointer to the Session ID string. Do not free.


//////////////////////////////////// MaHost ////////////////////////////////////

/// @class MaHost
///	@brief A single HTTP host listening on one TCP/IP endpoint.
///
///	A Host object represents a single HTTP connection endpoint. This may be
///	a default server or a virtual server. Multiple Hosts may be contained 
///	within a single Server.
///	@stability Evolving.


////////////////////////////////// MaDataStream ////////////////////////////////

/// @class MaDataStream
///	@brief Output stream for a HTTP request
///
///	Request handlers use DataStreams to buffer and manage the output of data
///	back to the client. Data streams are used for returning static file 
///	content and for dynamically generated data.
/// @stability Evolving.

/////////////////////////////////// MaRequest //////////////////////////////////

/// @class MaRequest
///	@brief Manage a HTTP request from a client
///
///	The Request class manages a HTTP client request to the server. If TCP/IP
///	Keep-Alive is used, the Request object may be reused for subsequent 
///	requests from the client on the same TCP/IP socket connection.
///	@stability Evolving


///	@fn char MaRequest*getFileName();
///	@synopsis Return the document file name to satisfy the current HTTP 
///		request.
///	@overview Certain URLs are mapped to corresponding documents in the 
///		file system. These may be HTML pages, CSS files or GIF/JPEG 
///		graphic files, among other file types. getFileName will return 
///		the local file system path to the document to return to the user. 
///		If the URL does not map to a local document, for example: 
///		EGI requests are served internally and do not map onto
///		a local file name, then this call will not return meaningful data.
///	@returns Pointer to the local file name for the document. Returns empty 
///		string if the handler does not map the URL onto a local document.
/// @stability Evolving.
/// @library libappweb
///	@see setFileName


///	@fn char *MaRequest::getVar(MaEnvType objType, char *var, 
///		char *defaultValue);
///	@synopsis Return the value of the specified HTTP environment variable
///	@overview This call will query the value of HTTP environment variables.
///		These variables are used by CGI, EGI and ESP handlers. ESP pages
///		and EGI forms may access these variables.
///	@param objType Type of environment variable. Select from: MA_SERVER_OBJ
///		MA_SESSION_OBJ MA_REQUEST_OBJ MA_HEADER_OBJ MA_COOKIE_OBJ 
///		MA_FILES_OBJ MA_FORM_OBJ MA_APPLICATION_OBJ MA_GLOBAL_OBJ 
///		MA_LOCAL_OBJ.
///	@param var Name of the variable to access.
///	@param defaultValue Default value to return if the variable is not 
///		defined.
///	@returns The value of the variable if it is defined. Otherwise the 
///		\a defaultValue is returned.
/// @stability Evolving.
/// @library libappweb
///	@see setVar


///	@fn int MaRequest::readPostData(char *buf, int bufsize);
///	@synopsis Read post data sent by the client in a HTTP POST request.
///	@overview This call is used by Appweb handlers to read post data 
///		sent by the client. Handlers may operate in PUSH or PULL mode
///		with respect to post data. In PUSH mode, appweb will call the
///		handlers postData method whenever post data arrives. In PULL
///		mode, the handler calls readPostData when it is ready to accept
///		post data. To enable PULL mode, a handler should call setPullPost.
///
///		readPostData may block while reading POST data. As such it should
///		only be used when Appweb is running in multi-threaded mode.
///	@note In PUSH mode, the postData method will be called when the handler
///		is idle. It will never be issued on another thread while the 
///		handler is active.
///	@param buf Pointer to buffer to store the post data
///	@param bufsize Length of buf
///	@returns Returns the number of bytes read. It will return 0 on EOF and
///		will return a negative MPR error code on errors.
/// @stability Evolving.
/// @library libappweb
///	@see MaHandler::postData, setPullPost


///	@fn void MaRequest::redirect(int code, char *targetUrl);
///	@synopsis Redirect the client to a new location
///	@overview This call will respond to the current request with a HTTP 
///		redirection. The redirection may be to another page within
///		the current web, or it may be to a different server. This call
///		will set the "Location" HTTP header and the HTTP response code.
///		The caller must still call flushOutput to send the response and to
///		close the request.
///	@param code The HTTP response code to return to the client.
///	@param targetUrl URL representing the new location. May omit the 
///		"http://server/" prefix for redirections within the exiting web.
/// @stability Evolving.
/// @library libappweb
///	@see requestError


///	@fn void MaRequest::requestError(int code, char *fmt, ...);
///	@synopsis Return an error to the client
///	@overview If a handler encounters an error, it can call requestError 
///		to return the appropriate HTTP error code and message to the 
///		client.
///	@param code HTTP error code. E.g. 500 for an internal server error.
///	@param fmt Printf style format string followed by assocated arguments.
/// @stability Evolving.
/// @library libappweb
///	@see Request, write, redirect


/// @fn void MaRequest::setHeader(char *value, bool allowMultiple = 0);
///	@synopsis Set a HTTP header in the response to the client.
///	@overview This call will define a header that will be included
///		in the HTTP response to the client. Appweb automatically creates
///		headers such as Server, Date and Content-Length. If 
///		setHeader is called to define one of these standard headers, 
///		the defined value will override the Appweb default. setHeader
///		can also be used to create custom headers.
///	@param value Complete header string. This is of the format
///	@pre Key: Value
///		Do not include a carriage return or newline in the string. 
///	@param allowMultiple If omitted or set to FALSE, then each call to
///		setHeader will replace any previously defined headers. If TRU
///		setHeader will allow muliple headers for a given key value.
/// @stability Evolving.
/// @library libappweb
///	@see setResponseCode, setHeaderFlags


///	@fn void MaRequest::setHeaderFlags(int headerFlags);
///	@synopsis Set various HTTP header response values
///	@overview This call is a convenience function to alter the standard
///		HTTP response headers.
///	@param headerFlags Flags may be set to MPR_HTTP_DONT_CACHE which will cause
///		Appweb to emit a "Cache-control: no-cache" header. This instructs
///		downstream caches, proxies and browsers not to cache the response.
///		If flags is set to MPR_HTTP_HEADER_WRITTEN, Appweb will not write
///		any standard headers and it is assumed that the handler will 
///		manually construct the HTTP headers in the response. 
/// @stability Evolving.
/// @library libappweb
///	@see setHeader


///	@fn int MaRequest::setFileName(char *newPath);
///	@synopsis Set the local file name for the document that satisfies 
///		this request.
///	@overview This call defines the local file name for a document 
///		which will be returned to the client.
///	@param newPath Path name in the local file system for the document.
///	@returns Returns zero if successful. Otherwise a negative MPR error 
///		code will be returned. On errors, maSetFileName will call 
///		requestError and will terminate the request.
/// @stability Evolving.
/// @library libappweb
///	@see getFileName, getUri, setUri


///	@fn void MaRequest::setPullPost();
///	@synopsis Switch the handler to manually pull the HTTP POST data.
///	@overview This call is used by handlers to tell Appweb that post
///		data must not be sent asynchronously via the postData method.
///		Instead, the handler desires to read the post data manually.
/// @stability Evolving.
/// @library libappweb
///	@see getVar


///	@fn int MaRequest::write(char *buf, int size);
///	@synopsis Write a block of data back to the client.
///	@overview This call is the most efficient way to return data back to 
///		the client.
///	@param buf Pointer to the data buffer to write
///	@param size Size of the buffer in bytes
///	@returns Number of bytes written. Should equal \a size. On errors, 
///		returns a negative MPR error code.
/// @stability Evolving.
/// @library libappweb
///	@see redirect, requestError, write, writeFmt


///	@fn int MaRequest::write(char *s);
///	@synopsis Write a string back to the client.
///	@overview Write a string back to the client.
///	@param s Pointer to string to write.
///	@returns Number of bytes written. On errors, returns a negative MPR 
///		error code.
/// @stability Evolving.
/// @library libappweb
///	@see  redirect, requestError, write, writeFmt


///	@fn int	 MaRequest::writeFmt(char *fmt, ...);
///	@synopsis Write a formatted string back to the client.
///	@overview Format a \a printf style string and write back to the client.
///	@param fmt Printf style format string followed by assocated arguments.
///	@returns Number of bytes written. On errors, returns a negative MPR 
///		error code.
/// @stability Evolving.
/// @library libappweb
///	@see  redirect, requestError, write


///	@fn void MaRequest::setVar(MaEnvType objType, char *var, char *value);
///	@synopsis Set the value of a HTTP environment variable
///	@overview This call will define the value of an HTTP environment 
///		variable. These variables are used by CGI, EGI and ESP 
///		handlers. ESP pages and EGI forms may access these variables. 
///		The variable will be created if it does not exist. If it 
///		already exists, its value will be updated.
///	@param objType Type of environment variable. Select from: MA_SERVER_OBJ
///		MA_SESSION_OBJ MA_REQUEST_OBJ MA_HEADER_OBJ MA_COOKIE_OBJ 
///		MA_FILES_OBJ MA_FORM_OBJ MA_APPLICATION_OBJ MA_GLOBAL_OBJ 
///		MA_LOCAL_OBJ.
///	@param var Name of environment variable to set.
///	@param value Value to set.
/// @stability Evolving.
/// @library libappweb
///	@see getVar


///	@fn char *MaRequest::getCookie();
///	@synopsis Get any cookie sent with this request. 
///	@overview This call returns the cookie string sent by the client
///		with the request. 
///	@returns NULL if no cookie is defined. Otherwise it returns a pointer
///		to the cookie string. The caller must NOT free this string.
/// @stability Evolving.
/// @library libappweb
///	@options Requires BLD_FEATURE_COOKIE or BLD_FEATURE_SESSION
///	@see getCrackedCookie, setCookie


///	@fn int MaRequest::getCrackedCookie(char **name, char **value, char **path);
///	@synopsis Decode a cookie string and return the cookie components.
///	@overview This call tokenizes the cookie string sent by the client
///		with the request and it returns the cookie name, value and path.
///	@param name Name of the cookie.
///	@param value Value associated with this name.
///	@param path URL prefix path for which this cookie applies.
/// @stability Evolving.
/// @library libappweb
///	@options Requires BLD_FEATURE_COOKIE or BLD_FEATURE_SESSION
///	@see getCookie, setCookie


/// @fn void MaRequest::setCookie(char *name, char *value, int lifetime, 
///		char *path, bool secure);
///	@synopsis Set a cookie to be defined in the client's browser
///	@overview This call will define a cookie which will be sent with the
///		response to the client. Subsequent requests from the browser 
///		should then contain the cookie. It can be used to create and
///		track user sessions.
///	@param name Name of the cookie. Must not contain a leading "$". Must
///		contain no spaces.
///	@param value Value of the cookie. Must not contain any spaces.
///	@param lifetime Time in seconds that the cookie should live.
///	@param path URL prefix path for which the cookie will be included in
///		subsequent requests.
///	@param secure If defined, the cookie is only valid when used with 
///		SSL connections.
/// @stability Evolving.
/// @library libappweb
///	@options Requires BLD_FEATURE_COOKIE or BLD_FEATURE_SESSION
///	@see getCookie, getCrackedCookie


///	@fn void MaRequest::createSession(int timeout);
///	@synopsis Create a new session data store
///	@overview Create a new session data store and associate it with this
///		request.
///	@param timeout Time in seconds for the session data store to live.
///	@options Requires BLD_FEATURE_SESSION


///	@fn void MaRequest::destroySession();
///	@synopsis Destroy the session data store 
///	@overview Destroy the session data store associated with this request.
///		This call will have no effect if a store has not been created.
///	@options Requires BLD_FEATURE_SESSION


///	@fn MaSession *MaRequest::getSession();
///	@synopsis Get the session data store
///	@overview Get the session data store associated with this request.
///	@return Returns a pointer to the Session object. Return zero if 
///		no session data store has been created.
///	@options Requires BLD_FEATURE_SESSION


///	@fn char *MaRequest::getSessionId();
///	@synopsis Return the Session ID 
///	@overview Return the session ID associated with this session. Session
///		IDs are strings that are unique in the server responding to the
///		request.
///	@return Returns a pointer to the Session ID string. Do not free.
///	@options Requires BLD_FEATURE_SESSION

/////////////////////////////////// MaHandler //////////////////////////////////


/// @class MaHandler
///	@brief Base class used by all request handlers
///	
/// Handlers are used to process client HTTP requests in a modular fashion.
///	A handler may \em match a request by URL extension or by a custom 
///	matchRequest method.
/// @stability Evolving.


///////////////////////////////////// MaRom ////////////////////////////////////

/// @class MaRom
///	@brief Definition for each file in the ROM file system.
///
///	A RomInode is created for each file in the Rom file system.
/// @stability Evolving.


///	@class MaRomFileSystem
/// @brief Serve web pages and files from ROM.
///
///	The Rom file system allows web pages and configuration files to be compiled
///	so a disk based file system is not required.


//
// Local variables:
// tab-width: 4
// c-basic-offset: 4
// End:
// vim: sw=4 ts=4 
//
