///
///	@file 	espHandler.dox
/// @brief 	Doxygen documentation for espHandler.h
///
////////////////////////////////////////////////////////////////////////////////
//
//	Copyright (c) Embedthis Software LLC, 2003-2009. All Rights Reserved.
//	The latest version of this code is available at http://www.mbedthis.com
//
//	This software is open source; you can redistribute it and/or modify it 
//	under the terms of the GNU General Public License as published by the 
//	Free Software Foundation; either version 2 of the License, or (at your 
//	option) any later version.
//
//	This program is distributed WITHOUT ANY WARRANTY; without even the 
//	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
//	See the GNU General Public License for more details at:
//	http://www.mbedthis.com/downloads/gplLicense.html
//	
//	This General Public License does NOT permit incorporating this software 
//	into proprietary programs. If you are unable to comply with the GPL, a 
//	commercial license for this software and support services are available
//	from Embedthis Software at http://www.mbedthis.com
//
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// C++ API //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


///	@class MaEspProc
///	@brief Create an ESP procedure
///	@deprecated Deprecated in 2.0. Use maEspDefineCMethod instead.
///	Instances of the MaEspProc class are created for each ESP procedure.
///	When the ESP procedure is invoked from the web page, the \a run method
///	will be invoked. The run method should write the appropriate data to the
///	browser in response.


///	@fn MaEspProc::MaEspProc(char *procName, char *scriptName = "javascript");
///	@deprecated Deprecated in 2.0. Use maEspDefineCMethod instead.
///	@synopsis Create an ESP procedure
///	@overview Instances of this class represent ESP procedures. 
///		When the ESP procedure is invoked, the \a run method will be 
///		called.
///	@param procName Name of the ESP procedure. This is the name to use
///		in the ESP web page.
///	@param scriptName Name of the script service to use. Defaults to
///		"javascript".
/// @stability Deprecated.
/// @library libespModule
/// @options Requires BLD_FEATURE_LEGACY_API.
///	@see maEspDefineCMethod


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// C API ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///	@fn void maEspDefineCMethod(char *methodName, EspCMethod fn, void *thisPtr);
///	@synopsis Defines a C lanaguage ESP method
///	@overview This call links a C procedure to an ESP method name. When 
///		a web page containing a call to the procedure is invoked, the 
//		ESP handler will ensure the nominated code is called.
///	@param methodName JavaScript function name to use in the ESP web page 
///		for this ESP procedure.
///	@param fn C callback function to invoke.
///	@param thisPtr Optional C++ object containing the methodName.
/// @stability Evolving.
/// @library libespModule
///	@see maEspDefineStringCMethod


///	@fn void maEspDefineStringCMethod(char *methodName, EspStringCMethod fn, 
///		void *thisPtr);
///	@synopsis Defines a C lanaguage ESP method
///	@overview This call links a C procedure to an ESP method name. When 
///		a web page containing a call to the procedure is invoked, the 
///		ESP handler will ensure the nominated code is called. The
///		arguments to the \a fn procedure will be converted to strings.
///	@param methodName JavaScript function name to use in the ESP web page 
///		for this ESP procedure.
///	@param fn C callback function to invoke.
///	@param thisPtr Optional C++ object containing the methodName.
/// @stability Evolving.
/// @library libespModule
///	@see maEspDefineCMethod

extern void	maEspSetErrorMsg(MaRequest *rq, char *fmt, ...);
extern void	maEspSetReturnValue(MaRequest *rq, MprVar value);

////////////////////////////////////////////////////////////////////////////////
//
// Local variables:
// tab-width: 4
// c-basic-offset: 4
// End:
// vim: sw=4 ts=4 
//
